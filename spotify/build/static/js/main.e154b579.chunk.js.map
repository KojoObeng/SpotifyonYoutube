{"version":3,"sources":["images/green-left-icon-arrow-left.png","images/spotify-youtube.jpg","images/dynamic.jpg","images/monkey-with-headphones.jpg","pages/home.js","components/PlaylistButton.js","components/Navigation.js","pages/pickPlaylist.js","pages/youtube.js","pages/modes.js","pages/dynamic.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","Card","Img","src","require","alt","href","Button","Component","spotifyWebApi","Spotify","PlaylistButton","props","playlistID","id","playlistName","name","numOfTracks","state","tracks","_isMounted","loop","bind","this","getPlaylistTracks","then","response","total","number","ID","i","Math","ceil","offset","r","push","map","hundred_tracks","items","concat","apply","setState","item","album_name","track","album","album_images","images","artists","artist","duration","duration_ms","track_name","date","added_at","to","pathname","image","NavigationBar","scrollPos","window","pageYOffset","show","Navbar","back","height","children","PickPlaylist","playlists","getPlaylists","setAccessToken","localStorage","getItem","getUserPlaylists","catch","error","console","log","Navigation","playlist","index","key","url","Youtube","loadVideo","player","YT","Player","width","videoId","playerVars","controls","autoplay","disablekb","enablejsapi","events","onPlayerReady","onPlayerStateChange","onError","location","setItem","JSON","stringify","shuffleArray","length","apiKey","search_terms","parse","current_index","query_IDs","Array","fill","lyric_IDs","lyric","last_updated","fetching","search2","handleQueueClick","min","tag","document","createElement","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","array","j","floor","random","e","target","playVideo","data","PlayerState","ENDED","start","end","controller","AbortController","signal","slice","fetch","method","headers","body","json","search_term","query","axios","get","changed","button_list","size","playlist_tracks","onClick","disabled","loadVideoById","abort","handleLyricToggleClick","createButtons","typedRef","typed","strings","typeSpeed","Spinner","animation","withRouter","Modes","Dynamic","spotify_id","first_video","current_state","is_interval","search","checkStatus","clearInterval","interval","getMyCurrentPlaybackState","a","getMyRecentlyPlayedTracks","setInterval","shuffle_state","getElementById","click","repeat_state","setRepeat","is_playing","pause","addEventListener","pauseVideo","PLAYING","PAUSED","App","params","getHashParams","loggedIn","access_token","hashParams","q","hash","substring","exec","decodeURIComponent","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,wD,iGCA3CD,EAAOC,QAAU,IAA0B,6C,kFCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,oD,+KC2B5BC,G,6KAlBP,OACI,yBAAKC,UAAU,aACX,kBAACC,EAAA,EAAD,CAAMD,UAAU,wBACZ,kBAACC,EAAA,EAAKC,IAAN,CAAUF,UAAU,2BAChBG,IAAKC,EAAQ,IACbC,IAAI,oBAER,uBAAGC,KAAK,+BACJ,kBAACC,EAAA,EAAD,CAAQP,UAAU,+BAAlB,6B,GAVLQ,c,gDCAbC,G,MAAgB,IAAIC,KAqFXC,E,kDAlFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,WAAa,EAAKD,MAAME,GAC7B,EAAKC,aAAe,EAAKH,MAAMI,KAC/B,EAAKC,YAAc,EACnB,EAAKC,MAAS,CACVC,OAAQ,IAEZ,EAAKC,YAAa,EAGlB,EAAKC,KAAKC,KAAV,gBAXe,E,6LAgBfC,KAAKJ,OAAS,G,SAGRV,EAAce,kBAAkBD,KAAKV,YAAYY,MAAK,SAACC,GACzD,EAAKT,YAAcS,EAASC,S,OAEhCJ,KAAKF,KAAKE,KAAKN,YAAaM,KAAKV,Y,0KAK1Be,EAAQC,G,yEAEfN,KAAKH,YAAa,EAETU,EAAE,E,YAAGA,EAAIC,KAAKC,KAAKJ,EAAS,M,iCACnBnB,EAAce,kBAAkBK,EAAI,CAACI,OAAU,IAAFH,IAAQL,MAAK,SAAAC,GAAa,OAAOA,K,OAAxFQ,E,OACJX,KAAKJ,OAAOgB,KAAKD,G,OAFsBJ,I,uBAM3CP,KAAKJ,OAASI,KAAKJ,OAAOiB,KAAI,SAAAC,GAC1B,OAAOA,EAAeC,SAE1Bf,KAAKJ,OAAS,GAAGoB,OAAOC,MAAM,GAAIjB,KAAKJ,QAEnCI,KAAKH,aAELG,KAAKkB,SAAS,CACVtB,OAAQI,KAAKJ,OAAOiB,KAAI,SAAAM,GACpB,MAAQ,CACJC,WAAYD,EAAKE,MAAMC,MAAM7B,KAC7B8B,aAAcJ,EAAKE,MAAMC,MAAME,OAC/BC,QAASN,EAAKE,MAAMI,QAAQZ,KAAI,SAACa,GAAY,OAAOA,EAAOjC,QAC3DkC,SAAUR,EAAKE,MAAMO,YACrBC,WAAYV,EAAKE,MAAM5B,KACvBqC,KAAMX,EAAKY,SACXxC,GAAI4B,EAAKE,MAAM9B,SAI3BS,KAAKH,YAAa,G,uJAKtBG,KAAKH,YAAa,I,+BAIlB,OAAIG,KAAKL,MAAMC,SAAW,GAAW,KAEjC,yBAAKnB,UAAU,uCACX,kBAAC,IAAD,CAAMuD,GAAK,CACPC,SAAU,WACV3C,WAAYU,KAAKV,WACjBE,aAAcQ,KAAKR,aACnBI,OAAQI,KAAKL,MAAMC,SAEnB,kBAACZ,EAAA,EAAD,CAAQP,UAAU,mBAAmBuB,KAAKR,cAC1C,yBAAKf,UAAU,iBAAiBG,IAAKoB,KAAKX,MAAM6C,MAAOpD,IAAKkB,KAAKR,qB,GA7ExDP,a,QCoBdkD,G,wDArBX,WAAY9C,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAS,CACVyC,UAAWC,OAAOC,YAClBC,MAAM,GAJK,E,qDAQf,OACI,kBAACC,EAAA,EAAD,CAAQ/D,UAAU,cACd,kBAAC,IAAD,CAAMuD,GAAI,IAAMhC,KAAKX,MAAMoD,MACvB,yBAAKhE,UAAU,yBAAyBG,IAAKC,EAAQ,IAA6CC,IAAI,mBAAmB4D,OAAO,QAEpI,6BACK1C,KAAKX,MAAMsD,e,GAfJ1D,cCDtBC,EAAgB,IAAIC,IA2CXyD,E,kDAxCX,WAAYvD,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,CACTkD,UAAW,IAEf,EAAKC,aAAe,EAAKA,aAAa/C,KAAlB,gBACpBb,EAAc6D,eAAeC,aAAaC,QAAQ,iBANnC,E,gEAUfjD,KAAK8C,iB,qCAEQ,IAAD,OACZ5D,EAAcgE,mBACbhD,MAAK,SAACC,GACH,EAAKe,SAAS,CAAC2B,UAAW1C,EAASY,WACtCoC,OAAM,SAACC,GACJC,QAAQC,IAAIF,Q,+BAIhB,OACI,6BACI,kBAACG,EAAD,CAAed,KAAK,SAApB,KACA,yBAAKhE,UAAU,iBAKX,yBAAKA,UAAU,uBACVuB,KAAKL,MAAMkD,UAAUhC,KAAI,SAAC2C,EAAUC,GAAX,OACtB,kBAAC,EAAD,CAAgBC,IAAKF,EAAS/D,KAAMF,GAAIiE,EAASjE,GAAIkE,MAAOA,EAAOhE,KAAM+D,EAAS/D,KAAMyC,MAAOsB,EAAShC,OAAO,GAAGmC,gB,GAhCnH1E,a,kDCArBC,EAAiB,IAAIC,IACrByE,E,kDACF,WAAYvE,GAAQ,IAAD,8BACf,cAAMA,IAqDVwE,UAAY,SAACtE,GACN,EAAKuE,OAAS,IAAIzB,OAAO0B,GAAGC,OAAO,SAAU,CAC5CtB,OAAQ,MACRuB,MAAO,OACPC,QAAS3E,EACT4E,WAAY,CACRC,SAAU,EACVC,SAAU,EACVC,UAAW,EACXC,YAAa,GAEjBC,OAAQ,CACJ,QAAW,EAAKC,cAChB,cAAiB,EAAKC,oBACtB,QAAW,EAAKC,YAjExBzF,EAAc6D,eAAeC,aAAaC,QAAQ,iBAG7C,EAAK5D,MAAMuF,SAAShF,SACrBoD,aAAa6B,QAAQ,SAAWC,KAAKC,UAAU,EAAKC,aAAa,EAAK3F,MAAMuF,SAAShF,UACrFoD,aAAa6B,QAAQ,WAAYC,KAAKC,UAAU,EAAK1F,MAAMuF,SAASpF,eACpEwD,aAAa6B,QAAQ,SAAUC,KAAKC,UAAU,EAAK1F,MAAMuF,SAAShF,OAAOqF,UAG7E5B,QAAQC,IAAI,EAAKjE,MAAMuF,SAAShF,QAGhC,EAAKD,MAAQ,CACTuF,OAAQ,0CACRC,aAAcnC,aAAaC,QAAQ,UACnC6B,KAAKM,MAAMpC,aAAaC,QAAQ,WAAWpC,KAAI,SAACQ,EAAOoC,GACnD,MAAO,CAACpC,EAAMI,QAAQ,GAAK,MAAQJ,EAAMQ,WAAYR,EAAM9B,GAAIkE,MAC9D,GACL4B,cAAe,EACfJ,OAAQH,KAAKM,MAAMpC,aAAaC,QAAQ,WACxCqC,UAAWC,MAAMT,KAAKM,MAAMpC,aAAaC,QAAQ,YAAYuC,KAAK,GAClEC,UAAWF,MAAMT,KAAKM,MAAMpC,aAAaC,QAAQ,YAAYuC,KAAK,GAClEE,OAAO,EACPC,aAAc,EACdC,UAAU,GAGdvC,QAAQC,IAAI,EAAK3D,MAAMwF,cAEvB,EAAKtF,YAAa,EAElB,EAAKgG,QAAU,EAAKA,QAAQ9F,KAAb,gBACf,EAAK8D,UAAY,EAAKA,UAAU9D,KAAf,gBACjB,EAAK+F,iBAAmB,EAAKA,iBAAiB/F,KAAtB,gBACxB,EAAK2E,oBAAsB,EAAKA,oBAAoB3E,KAAzB,gBArCZ,E,yMAwCTC,KAAK6F,QAAQ,EAAGrF,KAAKuF,IAAI,GAAI/F,KAAKL,MAAMsF,S,OACzC5C,OAAO0B,GAQR/D,KAAK6D,UAAU7D,KAAKL,MAAM2F,UAAU,MAP9BU,EAAMC,SAASC,cAAc,WAC/BtH,IAAM,qCACVyD,OAAO8D,wBAA0B,WAAO,EAAKtC,UAAU,EAAKlE,MAAM2F,UAAU,MACtEc,EAAiBH,SAASI,qBAAqB,UAAU,IAChDC,WAAWC,aAAaP,EAAKI,I,yIA0BvCI,GACT,IAAK,IAAIjG,EAAIiG,EAAMvB,OAAS,EAAG1E,EAAI,EAAGA,IAAK,CACvC,IAAMkG,EAAIjG,KAAKkG,MAAMlG,KAAKmG,UAAYpG,EAAI,IADH,EAEhB,CAACiG,EAAMC,GAAID,EAAMjG,IAAvCiG,EAAMjG,GAFgC,KAE5BiG,EAAMC,GAFsB,KAI3C,OAAOD,I,oCAGGI,GACVA,EAAEC,OAAOC,c,0CAGOF,GACZA,EAAEG,OAAS1E,OAAO0B,GAAGiD,YAAYC,QACjC5D,QAAQC,IAAI,6BACZtD,KAAK8F,iBAAiB9F,KAAKL,MAAM0F,cAAc,M,8BAI/CuB,GACY,MAAXA,EAAEG,MAA6B,MAAXH,EAAEG,MACvB/G,KAAK8F,iBAAiB9F,KAAKL,MAAM0F,cAAc,K,uEAKzC6B,EAAOC,G,oFACjBnH,KAAKoH,WAAa,IAAIC,gBAChBC,EAAStH,KAAKoH,WAAWE,OAE3BP,EAAO,CACP5B,aAAcnF,KAAKL,MAAMwF,aAAaoC,MAAML,EAAOC,GACnD7B,UAAWtF,KAAKL,MAAM2F,UACtBG,UAAWzF,KAAKL,MAAM8F,WAE1BzF,KAAKkB,SAAS,CACT0E,UAAU,IAGf5F,KAAKH,YAAa,E,SACK2H,MAAM,uCAAwC,CAC7DC,OAAQ,OACRH,OAAQA,EACRI,QAAS,CACL,OAAU,mBACV,eAAgB,oBAExBC,KAAM7C,KAAKC,UAAUgC,K,UAPnB5G,E,QASFH,KAAKH,W,kCACcM,EAASyH,O,QAAtBD,E,OACN3H,KAAKkB,SAAS,CACVoE,UAAWqC,EAAKrC,UAChBG,UAAWkC,EAAKlC,UAChBE,aAAcwB,EACdvB,UAAU,IAEd5F,KAAKH,YAAa,E,gLAIbgI,G,8EACLC,EAAQD,EAAY,GACxBE,IACCC,IAAI,oDAAsDhI,KAAKL,MAAMuF,OAAS,MAAQ4C,EAAQ,yCAC9F5H,MAAK,SAACC,GAEH,IAAI8H,EAAU,EAAKtI,MAAM2F,UAEzB2C,EAAQJ,EAAY,IAAM1H,EAAS4G,KAAKhG,MAAM,GAAGxB,GAAG2E,QACpD,EAAKhD,SAAS,CACVoE,UAAW2C,IACZ,kBAGN9E,OAAM,SAACC,GACJC,QAAQC,IAAIF,M,6IAWhB,IAPa,IAAD,OACR8E,EAAc,GACd7C,EAAgBrF,KAAKL,MAAM0F,cAC3B8C,EAAOnI,KAAKL,MAAMsF,OAClBmD,EAAkBpI,KAAKL,MAAMwF,aAC7BG,EAAYtF,KAAKL,MAAM2F,UALf,WAOH/E,GACD8E,GAAiB9E,GACjB2H,EAAYtH,KAAK,kBAAC5B,EAAA,EAAD,CAAQqJ,QAAS,WAAO,EAAKvC,iBAAiBT,EAAc9E,IAAK9B,UAAU,kCAAkCiF,IAAK2B,EAAc9E,EAAG+H,SAAyC,IAA/BhD,EAAUD,EAAc9E,IAArK,KAAkL6H,EAAgB/C,EAAc9E,GAAG,GAAnN,OAFhBA,EAAI,EAAGA,EAAI,EAAGA,IAAvB,EAASA,GAIT2H,EAAYtH,KAAK,kBAAC5B,EAAA,EAAD,CAAQP,UAAU,iCAAiCiF,IAAK2B,EAAeiD,SAAuC,IAA7BhD,EAAUD,IAA3F,KAAoH+C,EAAgB/C,GAAe,GAAnJ,OAEjB,IAbY,eAaH9E,GACDA,EAAI4H,EAAK,GACTD,EAAYtH,KAAK,kBAAC5B,EAAA,EAAD,CAAQqJ,QAAS,WAAO,EAAKvC,iBAAiBvF,IAAK9B,UAAU,+BAA+BiF,IAAKnD,EAAG+H,SAA2B,IAAjBhD,EAAU/E,IAAxH,KAAqI6H,EAAgB7H,GAAG,GAAxJ,OAFhBA,EAAE8E,EAAc,EAAG9E,EAAI8E,EAAc,EAAG9E,IAAM,EAA9CA,GAKT,OAAO2H,I,uCAEMzE,GAAQ,IAAD,OACpBzD,KAAKkB,SAAS,CACVmE,cAAe5B,EACfiC,OAAO,IACR,WACCrC,QAAQC,IAAI,EAAK3D,MAAM0F,eACvB,EAAKvB,OAAOyE,cAAc,EAAK5I,MAAM2F,UAAU,EAAK3F,MAAM0F,qB,+CAIxC,IAAD,OACrBrF,KAAKkB,SAAS,CACVwE,OAAQ1F,KAAKL,MAAM+F,QACpB,WACK,EAAK/F,MAAM+F,MACX,EAAK5B,OAAOyE,cAAc,EAAK5I,MAAM8F,UAAU,EAAK9F,MAAM0F,gBAG1D,EAAKvB,OAAOyE,cAAc,EAAK5I,MAAM2F,UAAU,EAAK3F,MAAM0F,qB,6CAOlErF,KAAKoH,WAAWoB,QAChBxI,KAAKH,YAAa,I,+BAGZ,IAAD,OACD8F,EAAe3F,KAAKL,MAAMgG,aAC9B,OACI,6BACI,yBAAKlH,UAAU,oBACX,kBAAC,IAAD,CAAMuD,GAAG,iBACL,yBAAKvD,UAAU,sBAAsBG,IAAKC,EAAQ,IAA6CC,IAAI,mBAAmB4D,OAAO,QAEjI,kBAAC1D,EAAA,EAAD,CAAQP,UAAU,uBAAuB4J,QAAS,kBAAK,EAAKI,0BAA0BH,SAA4D,IAAlDtI,KAAKL,MAAM2F,UAAUtF,KAAKL,MAAM0F,iBACtG,IAArBrF,KAAKL,MAAM+F,MAAiB,cAAiB,eAEjD1F,KAAK0I,iBAEN,yBAAKjK,UAAU,sBACX,yBAAKc,GAAG,WACR,yBAAKd,UAAU,YACVuB,KAAKL,MAAMiG,SACZ,yBAAKnH,UAAU,qBACX,6BACI,kBAAC,IAAD,CACIkK,SAAU,SAACC,GAAY,EAAKA,MAAQA,GACpCC,QAAS,CAAC,aAAc,mCAAoC,8BAA+B,0BAA2B,QACtHC,UAAW,GACXrK,UAAU,gBACVqB,MAAI,KAGZ,6BACI,kBAACiJ,EAAA,EAAD,CAASC,UAAU,SAASvK,UAAU,sBAG9C,6BACI,kBAACO,EAAA,EAAD,CAAQP,UAAU,2BAA2BiF,IAAI,SAAS2E,QAAS,WAAK,EAAKxC,QAAQF,EAAcA,EAAa,KAAO2C,SAA4D,IAAlDtI,KAAKL,MAAM2F,UAAUtF,KAAKL,MAAM0F,gBAAuBrF,KAAKL,MAAMiG,UAAnM,kBACA,kBAAC5G,EAAA,EAAD,CAAQP,UAAU,2BAA2BiF,IAAI,SAAS2E,QAAS,WAAK,EAAKxC,QAAQF,EAAcA,EAAa,KAAM2C,SAA4D,IAAlDtI,KAAKL,MAAM2F,UAAUtF,KAAKL,MAAM0F,gBAAuBrF,KAAKL,MAAMiG,UAAlM,mBACA,kBAAC5G,EAAA,EAAD,CAAQP,UAAU,2BAA2BiF,IAAI,UAAU2E,QAAS,WAAK,EAAKxC,QAAQF,EAAc,EAAKhG,MAAMsF,OAAO,IAAKqD,SAA4D,IAAlDtI,KAAKL,MAAM2F,UAAUtF,KAAKL,MAAM0F,gBAAuBrF,KAAKL,MAAMiG,UAAvM,2B,GA5OV3G,aAuPNgK,cAAWrF,GC7NZsF,G,6KAxBP,OACI,6BACI,kBAAC3F,EAAD,CAAed,KAAK,KACpB,yBAAKhE,UAAU,cACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,sCACX,kBAAC,IAAD,CAAMuD,GAAG,YACL,kBAAChD,EAAA,EAAD,CAAQP,UAAU,kBAAlB,aACA,yBAAKA,UAAU,gBAAgBG,IAAKC,EAAQ,IAA0BC,IAAI,OAGlF,yBAAKL,UAAU,uCACX,kBAAC,IAAD,CAAMuD,GAAG,iBACL,kBAAChD,EAAA,EAAD,CAAQP,UAAU,mBAAlB,cACA,yBAAKA,UAAU,iBAAiBG,IAAKC,EAAQ,IAAyCC,IAAI,c,GAhBtGG,cCHdC,G,MAAgB,IAAIC,KAkPXgK,E,kDA/OX,WAAY9J,GAAQ,IAAD,8BACf,cAAMA,IA+JVwE,UAAY,SAACtE,GACT,EAAKuE,OAAS,IAAIzB,OAAO0B,GAAGC,OAAO,SAAU,CACzCtB,OAAQ,MACRuB,MAAO,OACPC,QAAS3E,EACT4E,WAAY,CACRC,SAAU,EACVC,SAAU,EACVC,UAAW,EACXC,YAAa,GAErBC,OAAQ,CACJ,QAAW,EAAKC,cAChB,cAAiB,EAAKC,oBACtB,QAAW,EAAKC,YA5KpB,EAAKhF,MAAQ,CACT+F,OAAO,GAEX,EAAK0D,WAAa,GAClB,EAAK9D,UAAa,CAAC,GACnB,EAAKG,UAAa,CAAC,GACnB,EAAK4D,aAAc,EACnB,EAAKC,cAAgB,UAGrBpK,EAAc6D,eAAeC,aAAaC,QAAQ,iBAClD,EAAKsG,aAAc,EACnB,EAAKC,OAAS,EAAKA,OAAOzJ,KAAZ,gBACd,EAAK8D,UAAY,EAAKA,UAAU9D,KAAf,gBACjB,EAAK2E,oBAAsB,EAAKA,oBAAoB3E,KAAzB,gBAC3B,EAAK0I,uBAAyB,EAAKA,uBAAuB1I,KAA5B,gBAC9B,EAAK0J,YAAc,EAAKA,YAAY1J,KAAjB,gBACnB,EAAK0E,cAAgB,EAAKA,cAAc1E,KAAnB,gBAnBN,E,mEAsBfC,KAAKoH,WAAWoB,QAChBkB,cAAc1J,KAAK2J,UACnBtG,QAAQC,IAAI,a,+JAKRtD,KAAKqJ,aACLnK,EAAc0K,4BAA4B1J,KAA1C,uCAA+C,WAAOC,GAAP,iBAAA0J,EAAA,0DAEvC1J,EAASgB,KAF8B,uBAIvC,EAAKiI,WAAajJ,EAASgB,KAAK5B,GAJO,SAKjC,EAAKiK,OAAO,CAACrJ,EAASgB,KAAK1B,KAAO,MAAQU,EAASgB,KAAKM,QAAQ,GAAGhC,KAAMU,EAASgB,KAAK5B,GAAI,IAL1D,OAOlC8C,OAAO0B,GASR,EAAKF,UAAU,EAAKyB,UAAU,MAPxBU,EAAMC,SAASC,cAAc,WAC/BtH,IAAM,qCACVyD,OAAO8D,wBAA2B,WAAQ,EAAKtC,UAAU,EAAKyB,UAAU,MAClEc,EAAiBH,SAASI,qBAAqB,UAAU,IAChDC,WAAWC,aAAaP,EAAKI,IAKhD,EAAKiD,aAAc,EAlBoB,sBAuBvCnK,EAAc4K,4BAA4B5J,KAA1C,uCAA+C,WAAOC,GAAP,iBAAA0J,EAAA,6DAC3C,EAAKT,WAAajJ,EAASY,MAAM,GAAGM,MAAM9B,GADC,SAErC,EAAKiK,OAAO,CAACrJ,EAASY,MAAM,GAAGM,MAAM5B,KAAO,MAAQU,EAASY,MAAM,GAAGM,MAAMI,QAAQ,GAAGhC,KAAMU,EAASY,MAAM,GAAGM,MAAM9B,GAAI,IAFpF,OAItC8C,OAAO0B,GASR,EAAKF,UAAU,EAAKyB,UAAU,MAPxBU,EAAMC,SAASC,cAAc,WAC/BtH,IAAM,qCACVyD,OAAO8D,wBAA0B,WAAO,EAAKtC,UAAU,EAAKyB,UAAU,MAChEc,EAAiBH,SAASI,qBAAqB,UAAU,IAChDC,WAAWC,aAAaP,EAAKI,IAKhD,EAAKiD,aAAc,EAfwB,2CAA/C,uDAvBuC,2CAA/C,uDA8CJrJ,KAAK2J,SAAWI,aAAY,WACpB,EAAKR,aACJ,EAAKE,gBAEX,M,0IAGS,IAAD,OAEXvK,EAAc0K,4BAA4B1J,MAAK,SAACC,IAEZ,IAA3BA,EAAS6J,gBAA4B,EAAKV,cAAc,YACzDrD,SAASgE,eAAe,SAASC,QACjC,EAAKZ,cAAgB,WAEY,IAA3BnJ,EAAS6J,gBAA6B,EAAKV,cAAc,YAC/DrD,SAASgE,eAAe,QAAQC,QAChC,EAAKZ,cAAgB,WAIK,YAA1BnJ,EAASgK,eACJ,EAAKd,cACN,EAAKZ,yBACLvJ,EAAckL,UAAU,SAM5BjK,EAASgB,MAAShB,EAASgB,KAAK5B,KAAO,EAAK6J,aAC5C,EAAKG,aAAc,EACnB,EAAKH,WAAajJ,EAASgB,KAAK5B,GAChC,EAAK2B,SAAS,CACVwE,OAAO,GADX,sBAEG,sBAAAmE,EAAA,sEACO,EAAKL,OAAO,CAACrJ,EAASgB,KAAK1B,KAAO,MAAQU,EAASgB,KAAKM,QAAQ,GAAGhC,KAAMU,EAASgB,KAAK5B,GAAI,IADlG,uBAEO,EAAKuE,OAAOyE,cAAc,EAAKjD,UAAU,IAFhD,OAGC,EAAKgE,cAAgB,UACrB,EAAKC,aAAc,EACfpJ,EAASkK,YACTnL,EAAcoL,QANnB,kD,sEAeFzC,G,oFAET7H,KAAKoH,WAAa,IAAIC,gBAChBC,EAAStH,KAAKoH,WAAWE,OAE3BP,EAAO,CACP5B,aAAc,CAAC0C,GACfvC,UAAWtF,KAAKsF,UAChBG,UAAWzF,KAAKyF,WAEpBzF,KAAK4F,UAAW,E,SACO4B,MAAM,uCAAwC,CACjEC,OAAQ,OACJH,OAAQA,EACRI,QAAS,CACL,OAAU,mBACV,eAAgB,oBAExBC,KAAM7C,KAAKC,UAAUgC,K,cAPnB5G,E,gBAUaA,EAASyH,O,OAAtBD,E,OACN3H,KAAKsF,UAAaqC,EAAKrC,UACvBtF,KAAKyF,UAAYkC,EAAKlC,UACtBzF,KAAK4F,UAAY,EAEZ5F,KAAKqJ,cACNrJ,KAAK8D,OAAOyE,cAAcZ,EAAKrC,UAAU,IACzCtF,KAAKsJ,cAAgB,WAEzBtJ,KAAKuJ,aAAc,E,4IAwBT3C,GACVX,SAASgE,eAAe,SAASM,iBAAiB,SAAS,WACvD3D,EAAEC,OAAO2D,gBAEbvE,SAASgE,eAAe,QAAQM,iBAAiB,SAAS,WACtD3D,EAAEC,OAAOC,eAEbF,EAAEC,OAAOC,c,0CAGOF,GACZA,EAAEG,OAAS1E,OAAO0B,GAAGiD,YAAYyD,UACjCzK,KAAKsJ,cAAgB,WAErB1C,EAAEG,OAAS1E,OAAO0B,GAAGiD,YAAY0D,SACjC1K,KAAKsJ,cAAgB,UAErB1C,EAAEG,OAAS1E,OAAO0B,GAAGiD,YAAYC,OACjCjH,KAAK8D,OAAOyE,cAAcvI,KAAKsF,UAAU,M,8BAGzCsB,GACY,MAAXA,EAAEG,MAAkBH,EAAEG,O,+CAIL,IAAD,OACrB/G,KAAKkB,SAAS,CACVwE,OAAQ1F,KAAKL,MAAM+F,QACpB,WACK,EAAK/F,MAAM+F,MACX,EAAK5B,OAAOyE,cAAc,EAAK9C,UAAU,IAGzC,EAAK3B,OAAOyE,cAAc,EAAKjD,UAAU,S,+BAM1C,IAAD,OACN,OACI,6BACI,kBAAC/B,EAAD,CAAed,KAAK,SAChB,kBAACzD,EAAA,EAAD,CAAQP,UAAU,uBAAuB4J,QAAS,kBAAK,EAAKI,2BACnDzI,KAAKL,MAAM+F,MAAQ,cAAiB,gBAGjD,yBAAKjH,UAAY,oBACb,yBAAKc,GAAG,UAAR,KACA,kBAACP,EAAA,EAAD,CAAQO,GAAG,QAAQd,UAAU,aAA7B,SACA,kBAACO,EAAA,EAAD,CAAQO,GAAG,OAAOd,UAAU,aAA5B,c,GAxOEQ,aCAhBC,EAAgB,IAAIC,IAyCXwL,E,kDAtCb,WAAYtL,GAAQ,IAAD,8BACjB,cAAMA,IACDuL,OAAS,EAAKC,gBACnB,EAAKlL,MAAQ,CACXmL,WAAU,EAAKF,OAAOG,cAGpB,EAAKH,OAAOG,eACd7L,EAAc6D,eAAe,EAAK6H,OAAOG,cACzC/H,aAAa6B,QAAQ,eAAgB,EAAK+F,OAAOG,eATlC,E,4DAgBjB,IAHA,IACInE,EADAoE,EAAa,GACVrK,EAAI,uBACPsK,EAAI5I,OAAOuC,SAASsG,KAAKC,UAAU,GAC/BvE,EAAIjG,EAAEyK,KAAKH,IACfD,EAAWpE,EAAE,IAAMyE,mBAAmBzE,EAAE,IAE5C,OAAOoE,I,+BAGP,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,SAASC,UAAWrC,IAChC,kBAAC,IAAD,CAAOoC,KAAK,WAAWC,UAAW3H,IAClC,kBAAC,IAAD,CAAO0H,KAAK,WAAWC,UAAWpC,IAClC,kBAAC,IAAD,CAAOmC,KAAK,gBAAgBC,UAAW3I,IACvC,kBAAC,IAAD,CAAO0I,KAAK,IAAIC,UAAW/M,W,GA/BrBS,aCEEuM,QACW,cAA7BnJ,OAAOuC,SAAS6G,UAEe,UAA7BpJ,OAAOuC,SAAS6G,UAEhBpJ,OAAOuC,SAAS6G,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5F,SAASgE,eAAe,SDyHpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrB9L,MAAK,SAAA+L,GACJA,EAAaC,gBAEd/I,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM+I,c","file":"static/js/main.e154b579.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/green-left-icon-arrow-left.9ac61d34.png\";","module.exports = __webpack_public_path__ + \"static/media/spotify-youtube.df22d929.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dynamic.5dcecaa6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/monkey-with-headphones.ca4c559e.jpg\";","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React, { Component } from 'react';\r\nimport { Button, Card} from \"react-bootstrap\";\r\nimport \"../css/home.css\"\r\n\r\n\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"home-page\">\r\n                <Card className=\"spotify-youtube-card\">\r\n                    <Card.Img className=\"spotify-youtube-card-img\"\r\n                        src={require(\"../images/spotify-youtube.jpg\")}\r\n                        alt=\"Spotify-Youtube\"\r\n                    />\r\n                    <a href=\"http://localhost:8888/login\">\r\n                        <Button className=\"spotify-youtube-card-button\">\r\n                            Login With Spotify\r\n                        </Button>\r\n                    </a>\r\n                </Card>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component} from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Spotify from \"spotify-web-api-js\";\r\nimport {Link} from 'react-router-dom';\r\nimport {Button} from \"react-bootstrap\";\r\nimport \"../css/pickPlaylist.css\"\r\n\r\nconst spotifyWebApi = new Spotify();\r\n\r\nclass PlaylistButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.playlistID = this.props.id;\r\n        this.playlistName = this.props.name;\r\n        this.numOfTracks = 0;\r\n        this.state  = {\r\n            tracks: []\r\n        }\r\n        this._isMounted = false\r\n        \r\n        \r\n        this.loop.bind(this);\r\n    }\r\n\r\n    async componentWillMount ()  {\r\n  \r\n        this.tracks = [];\r\n\r\n        // Store length of tracks, then start loop of getting all the tracks\r\n        await spotifyWebApi.getPlaylistTracks(this.playlistID).then((response) => {\r\n            this.numOfTracks = response.total\r\n        })\r\n        this.loop(this.numOfTracks, this.playlistID)\r\n\r\n    }\r\n\r\n    // Get all tracks for each playlist by looping through each 100 tracks given\r\n    async loop(number, ID) {\r\n\r\n        this._isMounted = true\r\n\r\n        for (let i=0; i < Math.ceil(number / 100); i++) {\r\n            var r = await spotifyWebApi.getPlaylistTracks(ID, {offset: i*100}).then(response => {return response})\r\n            this.tracks.push(r)\r\n        }\r\n        \r\n\r\n        this.tracks = this.tracks.map(hundred_tracks => {\r\n            return hundred_tracks.items\r\n        })\r\n        this.tracks = [].concat.apply([], this.tracks);\r\n\r\n        if (this._isMounted) {\r\n            \r\n            this.setState({\r\n                tracks: this.tracks.map(item => {\r\n                    return  {\r\n                        album_name: item.track.album.name,\r\n                        album_images: item.track.album.images,\r\n                        artists: item.track.artists.map((artist) => {return artist.name}),\r\n                        duration: item.track.duration_ms,\r\n                        track_name: item.track.name,\r\n                        date: item.added_at,\r\n                        id: item.track.id,\r\n                    }\r\n                })\r\n            })\r\n            this._isMounted = false\r\n        }\r\n    }\r\n\r\n    componentWillUnmount () {\r\n        this._isMounted = false\r\n    }\r\n\r\n    render () {\r\n        if (this.state.tracks === []) return null;\r\n        return (\r\n            <div className=\"playlist-button-and-image-container\">\r\n                <Link to= {{\r\n                    pathname: \"/youtube\",\r\n                    playlistID: this.playlistID,\r\n                    playlistName: this.playlistName,\r\n                    tracks: this.state.tracks\r\n                    }}>\r\n                    <Button className=\"playlist-button\">{this.playlistName}</Button>\r\n                    <img className=\"playlist-image\" src={this.props.image} alt={this.playlistName}/>\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default PlaylistButton","import React, { Component } from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport {Link} from 'react-router-dom';\r\nimport \"../css/navigation.css\"\r\n\r\n\r\nclass NavigationBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state  = {\r\n            scrollPos: window.pageYOffset,\r\n            show: true,\r\n        }\r\n    }\r\n    render () {\r\n        return(\r\n            <Navbar className=\"navigation\">\r\n                <Link to={\"/\" + this.props.back}>\r\n                    <img className=\"navigation-back-button\" src={require(\"../images/green-left-icon-arrow-left.png\")} alt=\"Green Left Arrow\" height=\"30\" />\r\n                </Link>\r\n                <div> \r\n                    {this.props.children}\r\n                </div>\r\n            </Navbar> \r\n        )\r\n    }\r\n}\r\n\r\nexport default NavigationBar","import React, { Component } from 'react';\r\nimport Spotify from 'spotify-web-api-js';\r\nimport PlaylistButton from \"../components/PlaylistButton\"\r\nimport \"../css/pickPlaylist.css\"\r\nimport NavigationBar from \"../components/Navigation\"\r\n\r\nconst spotifyWebApi = new Spotify();\r\n\r\nclass PickPlaylist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playlists: [],\r\n        }\r\n        this.getPlaylists = this.getPlaylists.bind(this);\r\n        spotifyWebApi.setAccessToken(localStorage.getItem(\"access_token\"))\r\n        \r\n    }\r\n    componentDidMount() {\r\n        this.getPlaylists()\r\n    }\r\n    getPlaylists () {\r\n        spotifyWebApi.getUserPlaylists()\r\n        .then((response) => {\r\n            this.setState({playlists: response.items})})\r\n        .catch((error) => {\r\n            console.log(error)\r\n        });\r\n    }\r\n    render() {\r\n        return(\r\n            <div>\r\n                <NavigationBar back=\"modes\"> </NavigationBar>\r\n                <div className=\"playlist-page\">\r\n                    \r\n                    {/* <div className=\"pick-a-playlist-text\">\r\n                        Pick a playlist\r\n                    </div> */}\r\n                    <div className=\"playlists-container\">\r\n                        {this.state.playlists.map((playlist, index) => (\r\n                            <PlaylistButton key={playlist.name} id={playlist.id} index={index} name={playlist.name} image={playlist.images[0].url}></PlaylistButton>\r\n                            ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PickPlaylist;","import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport {Link, useLocation, withRouter} from \"react-router-dom\";\r\nimport { Button, Spinner} from \"react-bootstrap\";\r\nimport \"../css/youtube.css\"\r\nimport Spotify from 'spotify-web-api-js'\r\nimport Typed from 'react-typed';\r\n\r\nconst spotifyWebApi =  new Spotify();\r\nclass Youtube extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Get access token to make calls\r\n        spotifyWebApi.setAccessToken(localStorage.getItem(\"access_token\"));\r\n\r\n        // Start off by saving details of this playlist to localstorage if it is available\r\n        if  (this.props.location.tracks) {\r\n            localStorage.setItem(\"tracks\",  JSON.stringify(this.shuffleArray(this.props.location.tracks)))\r\n            localStorage.setItem(\"playlist\", JSON.stringify(this.props.location.playlistName))\r\n            localStorage.setItem(\"length\", JSON.stringify(this.props.location.tracks.length))\r\n        }\r\n\r\n        console.log(this.props.location.tracks)\r\n        \r\n        // Search Terms syntax is - [\"title\", \"spotify-id\", index in the search-terms array]\r\n        this.state = {\r\n            apiKey: \"AIzaSyAUlBPBvCwXcYNNahVcmWPKphhIs4YjaWQ\",\r\n            search_terms: localStorage.getItem(\"tracks\") ? \r\n            JSON.parse(localStorage.getItem(\"tracks\")).map((track, index) => {\r\n                return [track.artists[0] + \" - \" + track.track_name, track.id, index];\r\n            }) : \"\",\r\n            current_index: 0,\r\n            length: JSON.parse(localStorage.getItem(\"length\")),\r\n            query_IDs: Array(JSON.parse(localStorage.getItem(\"length\"))).fill(0),\r\n            lyric_IDs: Array(JSON.parse(localStorage.getItem(\"length\"))).fill(0),\r\n            lyric: false,\r\n            last_updated: 0,\r\n            fetching: false\r\n        }\r\n\r\n        console.log(this.state.search_terms)\r\n\r\n        this._isMounted = false;\r\n\r\n        this.search2 = this.search2.bind(this)\r\n        this.loadVideo = this.loadVideo.bind(this)\r\n        this.handleQueueClick = this.handleQueueClick.bind(this)\r\n        this.onPlayerStateChange = this.onPlayerStateChange.bind(this)\r\n    }\r\n    async componentDidMount() {\r\n        await this.search2(0, Math.min(10, this.state.length));\r\n        if (!window.YT) {\r\n            const tag = document.createElement('script');\r\n            tag.src = 'https://www.youtube.com/iframe_api'\r\n            window.onYouTubeIframeAPIReady = () => {this.loadVideo(this.state.query_IDs[0])};\r\n            const firstScriptTag = document.getElementsByTagName('script')[0];\r\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n        }\r\n        else {\r\n            this.loadVideo(this.state.query_IDs[0]);\r\n        }\r\n\r\n    }\r\n\r\n    loadVideo = (id) => {\r\n           this.player = new window.YT.Player('player', {\r\n            height: '720',\r\n            width: '1280',\r\n            videoId: id,\r\n            playerVars: {\r\n                controls: 1,\r\n                autoplay: 0,\r\n                disablekb: 1,\r\n                enablejsapi: 1,\r\n            },\r\n            events: {\r\n                'onReady': this.onPlayerReady,\r\n                'onStateChange': this.onPlayerStateChange,\r\n                'onError': this.onError,\r\n            }\r\n        });\r\n    }\r\n    shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array\r\n    }\r\n\r\n    onPlayerReady(e) {\r\n        e.target.playVideo();\r\n    }\r\n\r\n    onPlayerStateChange(e) {\r\n        if (e.data === window.YT.PlayerState.ENDED) {\r\n            console.log(\"YouTube Video is ENDING!!\");\r\n            this.handleQueueClick(this.state.current_index+1);\r\n        }\r\n    }\r\n\r\n    onError(e) {\r\n        if ((e.data === 101) || (e.data === 150)) {\r\n            this.handleQueueClick(this.state.current_index+1);\r\n        }\r\n\r\n    }\r\n\r\n    async search2(start, end) {\r\n        this.controller = new AbortController();\r\n        const signal = this.controller.signal;\r\n\r\n        var data = {\r\n            search_terms: this.state.search_terms.slice(start, end),\r\n            query_IDs: this.state.query_IDs,\r\n            lyric_IDs: this.state.lyric_IDs,\r\n        }\r\n        this.setState({\r\n             fetching: true\r\n        })\r\n\r\n        this._isMounted = true;\r\n        const response = await fetch('http://localhost:8888/youtube_search', { \r\n                method: 'POST',\r\n                signal: signal,\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n        if (this._isMounted) {\r\n            const body = await response.json()\r\n            this.setState({\r\n                query_IDs: body.query_IDs,\r\n                lyric_IDs: body.lyric_IDs,\r\n                last_updated: end,\r\n                fetching: false        \r\n            })\r\n            this._isMounted = false\r\n        }\r\n    }\r\n    \r\n    async search(search_term) {\r\n        var query = search_term[0]\r\n        axios\r\n        .get(\"https://www.googleapis.com/youtube/v3/search?key=\" + this.state.apiKey + \"&q=\" + query + \"&part=snippet&maxResults=1&type=video\")\r\n        .then((response) => {\r\n            // var joined = this.state.query_IDs.concat(response.data.items[0].id.videoId);\r\n            var changed = this.state.query_IDs\r\n            // search_term[2]] is the index of the original search. Set that same index in the query_IDS to the youtube-video-id\r\n            changed[search_term[2]] = response.data.items[0].id.videoId\r\n            this.setState({\r\n                query_IDs: changed, \r\n            }, () => {\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        });\r\n    } \r\n\r\n    createButtons() {\r\n        var button_list = []\r\n        var current_index = this.state.current_index;\r\n        var size = this.state.length;\r\n        var playlist_tracks = this.state.search_terms;\r\n        var query_IDs = this.state.query_IDs;\r\n\r\n        for (let i = 4; i > 0; i--)\r\n            if (current_index >= i) {\r\n                button_list.push(<Button onClick={() => {this.handleQueueClick(current_index-i)}} className=\"spotify-youtube-previous-button\" key={current_index-i} disabled={query_IDs[current_index-i] === 0}>  {playlist_tracks[current_index-i][0]} </Button>)\r\n            }\r\n        button_list.push(<Button className=\"spotify-youtube-current-button\" key={current_index} disabled={query_IDs[current_index] === 0}>  {playlist_tracks[current_index][0]}  </Button>)\r\n        \r\n        for (let i=current_index+1; i < current_index+6; i++) {\r\n            if (i < size-1) {\r\n                button_list.push(<Button onClick={() => {this.handleQueueClick(i)}} className=\"spotify-youtube-next-buttons\" key={i} disabled={query_IDs[i] === 0}>  {playlist_tracks[i][0]} </Button>)\r\n            }\r\n        }\r\n        return button_list\r\n    }\r\n    handleQueueClick(index) {\r\n        this.setState({\r\n            current_index: index,\r\n            lyric: false,\r\n        }, () => {\r\n            console.log(this.state.current_index)\r\n            this.player.loadVideoById(this.state.query_IDs[this.state.current_index])\r\n        })\r\n    }\r\n\r\n    handleLyricToggleClick() {\r\n        this.setState({\r\n            lyric: !this.state.lyric,\r\n        }, () => {\r\n            if (this.state.lyric) {\r\n                this.player.loadVideoById(this.state.lyric_IDs[this.state.current_index])\r\n            }\r\n            else {\r\n                this.player.loadVideoById(this.state.query_IDs[this.state.current_index])\r\n            }\r\n            \r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.controller.abort()\r\n        this._isMounted = false\r\n    }\r\n\r\n    render() {\r\n        var last_updated = this.state.last_updated\r\n        return(\r\n            <div>\r\n                <div className=\"button-container\">\r\n                    <Link to=\"/pickPlaylist\">\r\n                        <img className=\"youtube-back-button\" src={require(\"../images/green-left-icon-arrow-left.png\")} alt=\"Green Left Arrow\" height=\"30\" />\r\n                    </Link>\r\n                    <Button className=\"youtube-lyric-button\" onClick={()=> this.handleLyricToggleClick()} disabled={this.state.query_IDs[this.state.current_index]=== 0}>\r\n                        {this.state.lyric === true ? \"Music Video\" :  \"Lyric Video\"}\r\n                    </Button>\r\n                    {this.createButtons()}\r\n                </div>\r\n                    <div className=\"player-and-sidebar\">\r\n                        <div id=\"player\" />\r\n                        <div className=\"sidebar\"/>\r\n                            {this.state.fetching ? \r\n                            <div className=\"typed-and-spinner\">\r\n                                <div>\r\n                                    <Typed\r\n                                        typedRef={(typed) => { this.typed = typed; }}\r\n                                        strings={['Loading...', \"Retrieving links from Youtube...\", \"Getting HD quality links...\", \"Getting lyric videos...\", \"Load\"]}\r\n                                        typeSpeed={30}\r\n                                        className=\"loading-typed\"\r\n                                        loop\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    <Spinner animation=\"border\" className=\"loading-spinner\" />\r\n                                </div>\r\n                            </div> :\r\n                            <div>\r\n                                <Button className=\"youtube-load-more-button\" key=\"Load20\" onClick={()=>{this.search2(last_updated, last_updated+20 )}} disabled={this.state.query_IDs[this.state.current_index]=== 0 || this.state.fetching}> Load Next 20 </Button>\r\n                                <Button className=\"youtube-load-more-button\" key=\"Load50\" onClick={()=>{this.search2(last_updated, last_updated+50)}} disabled={this.state.query_IDs[this.state.current_index]=== 0 || this.state.fetching}>  Load Next 50 </Button>\r\n                                <Button className=\"youtube-load-more-button\" key=\"LoadAll\" onClick={()=>{this.search2(last_updated, this.state.length-1)}} disabled={this.state.query_IDs[this.state.current_index]=== 0 || this.state.fetching}> Load All Songs </Button>\r\n                            </div>}\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n  \r\n\r\nexport default  withRouter(Youtube)","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React, { Component } from 'react';\r\nimport {Button} from \"react-bootstrap\";\r\nimport {Link} from 'react-router-dom';\r\nimport \"../css/modes.css\"\r\nimport NavigationBar from \"../components/Navigation\"\r\n\r\n\r\n\r\nclass Modes extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <NavigationBar back=\"\"></NavigationBar>\r\n                <div className=\"modes-page\">\r\n                    <div className=\"modes-container\">\r\n                        <div className=\"dynamic-button-and-image-container\">\r\n                            <Link to=\"/dynamic\">\r\n                                <Button className=\"dynamic-button\"> Dynamic </Button>\r\n                                <img className=\"dynamic-image\" src={require(\"../images/dynamic.jpg\")} alt=\"\"/>\r\n                            </Link>\r\n                        </div>\r\n                        <div className=\"playlist-button-and-image-container\">\r\n                            <Link to=\"/pickPlaylist\">\r\n                                <Button className=\"playlist-button\"> Playlist </Button>\r\n                                <img className=\"playlist-image\" src={require(\"../images/monkey-with-headphones.jpg\")} alt=\"\"/>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modes\r\n","import React, { Component } from 'react';\r\nimport Spotify from 'spotify-web-api-js';\r\nimport {Button} from \"react-bootstrap\";\r\nimport \"../css/dynamic.css\"\r\nimport NavigationBar from \"../components/Navigation\"\r\n\r\nconst spotifyWebApi = new Spotify();\r\n\r\nclass Dynamic extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lyric: false,\r\n        }\r\n        this.spotify_id = \"\";\r\n        this.query_IDs =  [0];\r\n        this.lyric_IDs =  [0];\r\n        this.first_video = true;\r\n        this.current_state = \"stopped\";\r\n\r\n        // Set Access Token for Use\r\n        spotifyWebApi.setAccessToken(localStorage.getItem(\"access_token\"))\r\n        this.is_interval = true\r\n        this.search = this.search.bind(this)\r\n        this.loadVideo = this.loadVideo.bind(this)\r\n        this.onPlayerStateChange = this.onPlayerStateChange.bind(this)\r\n        this.handleLyricToggleClick = this.handleLyricToggleClick.bind(this)\r\n        this.checkStatus = this.checkStatus.bind(this)\r\n        this.onPlayerReady = this.onPlayerReady.bind(this) \r\n    }\r\n    componentWillUnmount () {\r\n        this.controller.abort()\r\n        clearInterval(this.interval)\r\n        console.log(\"cleared\")\r\n    }\r\n\r\n    async componentDidMount () {\r\n        // If this is the first video, we are going to load the script\r\n        if (this.first_video) {\r\n            spotifyWebApi.getMyCurrentPlaybackState().then(async (response) => {\r\n                // \r\n                if (response.item) {\r\n\r\n                    this.spotify_id = response.item.id\r\n                    await this.search([response.item.name + \" - \" + response.item.artists[0].name, response.item.id, 0])\r\n\r\n                    if (!window.YT) {\r\n                        // Adding Script Element\r\n                        const tag = document.createElement('script');\r\n                        tag.src = 'https://www.youtube.com/iframe_api'\r\n                        window.onYouTubeIframeAPIReady =  () => { this.loadVideo(this.query_IDs[0])}\r\n                        const firstScriptTag = document.getElementsByTagName('script')[0];\r\n                        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n                    }\r\n                    else {\r\n                        this.loadVideo(this.query_IDs[0])\r\n                    }\r\n                    this.first_video = false;  \r\n                }\r\n\r\n                else {\r\n                    // If nothign is currently playing, get recently playing tracks\r\n                    spotifyWebApi.getMyRecentlyPlayedTracks().then(async (response) => {\r\n                        this.spotify_id = response.items[0].track.id\r\n                        await this.search([response.items[0].track.name + \" - \" + response.items[0].track.artists[0].name, response.items[0].track.id, 0])\r\n                        \r\n                        if (!window.YT) {\r\n                            // Adding Script Element\r\n                            const tag = document.createElement('script');\r\n                            tag.src = 'https://www.youtube.com/iframe_api'\r\n                            window.onYouTubeIframeAPIReady = () => {this.loadVideo(this.query_IDs[0])};\r\n                            const firstScriptTag = document.getElementsByTagName('script')[0];\r\n                            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n                        }\r\n                        else {\r\n                            this.loadVideo(this.query_IDs[0]);\r\n                        }\r\n                        this.first_video = false;\r\n                            \r\n                    })\r\n                }\r\n            })\r\n        }\r\n\r\n        // Check status every x milliseconds\r\n        this.interval = setInterval(() => {\r\n            if (this.is_interval) {\r\n                 this.checkStatus()\r\n            }\r\n        }, 2500)\r\n    }\r\n\r\n    checkStatus () {\r\n\r\n        spotifyWebApi.getMyCurrentPlaybackState().then((response) => {\r\n            // If shuffle, pause, if not,  play.\r\n            if ((response.shuffle_state === true) && (this.current_state=\"playing\")) {\r\n                document.getElementById('pause').click()\r\n                this.current_state = \"paused\"\r\n            }\r\n            else if ((response.shuffle_state === false) && (this.current_state=\"paused\")) {\r\n                document.getElementById('play').click()\r\n                this.current_state = \"playing\"\r\n            }\r\n\r\n            // If on repeat, toggle lyric video/music video\r\n            if (response.repeat_state === \"context\") {\r\n                if (!this.first_video) {\r\n                    this.handleLyricToggleClick()\r\n                    spotifyWebApi.setRepeat(\"off\")\r\n                }\r\n\r\n            }\r\n\r\n            // If it's playing and its not our current\r\n            if (response.item && (response.item.id !== this.spotify_id)) {\r\n                this.is_interval = false;\r\n                this.spotify_id = response.item.id;\r\n                this.setState({\r\n                    lyric: false\r\n                }, async () => {\r\n                    await this.search([response.item.name + \" - \" + response.item.artists[0].name, response.item.id, 0])\r\n                    await this.player.loadVideoById(this.query_IDs[0]);\r\n                    this.current_state = \"playing\"\r\n                    this.is_interval = true;\r\n                    if (response.is_playing) {\r\n                        spotifyWebApi.pause()\r\n                    }\r\n                })\r\n            } \r\n        })\r\n\r\n    }\r\n\r\n    \r\n    async search(search_term) {\r\n        // Creating a signal so we can abort the fetch request when we unmout\r\n        this.controller = new AbortController();\r\n        const signal = this.controller.signal;\r\n\r\n        var data = {\r\n            search_terms: [search_term],\r\n            query_IDs: this.query_IDs,\r\n            lyric_IDs: this.lyric_IDs,\r\n        }\r\n        this.fetching = true\r\n        const response = await fetch('http://localhost:8888/youtube_search', {   \r\n            method: 'POST',\r\n                signal: signal,\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n\r\n        const body = await response.json()\r\n        this.query_IDs =  body.query_IDs;\r\n        this.lyric_IDs = body.lyric_IDs;\r\n        this.fetching =  false;\r\n\r\n        if (!this.first_video) {\r\n            this.player.loadVideoById(body.query_IDs[0])\r\n            this.current_state = \"playing\"\r\n        }\r\n        this.is_interval = true;\r\n\r\n    }\r\n\r\n    loadVideo = (id) => {\r\n        this.player = new window.YT.Player('player', {\r\n            height: '720',\r\n            width: '1280',\r\n            videoId: id,\r\n            playerVars: {\r\n                controls: 1,\r\n                autoplay: 0,\r\n                disablekb: 1,\r\n                enablejsapi: 1,\r\n         },\r\n        events: {\r\n            'onReady': this.onPlayerReady,\r\n            'onStateChange': this.onPlayerStateChange,\r\n            'onError': this.onError,\r\n        }\r\n        });\r\n    }\r\n    \r\n\r\n    onPlayerReady(e) {\r\n        document.getElementById('pause').addEventListener('click', function() {\r\n            e.target.pauseVideo();\r\n        })\r\n        document.getElementById('play').addEventListener('click', function() {\r\n            e.target.playVideo();\r\n        })\r\n        e.target.playVideo();\r\n    }\r\n\r\n    onPlayerStateChange(e) {\r\n        if (e.data === window.YT.PlayerState.PLAYING) {\r\n            this.current_state = \"playing\"\r\n        }\r\n        if (e.data === window.YT.PlayerState.PAUSED) {\r\n            this.current_state = \"paused\"\r\n        }\r\n        if (e.data === window.YT.PlayerState.ENDED) {\r\n            this.player.loadVideoById(this.query_IDs[0])\r\n        }\r\n    }\r\n    onError(e) {\r\n        if ((e.data === 101) || (e.data === 150)) {\r\n        }\r\n    }\r\n\r\n    handleLyricToggleClick() {\r\n        this.setState({\r\n            lyric: !this.state.lyric,\r\n        }, () => {\r\n            if (this.state.lyric) {\r\n                this.player.loadVideoById(this.lyric_IDs[0])\r\n            }\r\n            else {\r\n                this.player.loadVideoById(this.query_IDs[0])\r\n            }\r\n            \r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div> \r\n                <NavigationBar back=\"modes\">\r\n                    <Button className=\"dynamic-lyric-button\" onClick={()=> this.handleLyricToggleClick()}>\r\n                            {this.state.lyric ? \"Music Video\" :  \"Lyric Video\"}\r\n                    </Button>\r\n                </NavigationBar>\r\n                <div className = \"player-container\">\r\n                    <div id=\"player\"> </div>\r\n                    <Button id=\"pause\" className=\"invisible\">Pause</Button>\r\n                    <Button id=\"play\" className=\"invisible\">Play</Button>\r\n                </div>\r\n            </div>)\r\n            \r\n    }\r\n}\r\n\r\n\r\nexport default Dynamic\r\n","import React, { Component } from \"react\";\r\nimport {BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./pages/home.js\"\r\nimport PickPlaylist from \"./pages/pickPlaylist.js\"\r\nimport Youtube from \"./pages/youtube.js\"\r\nimport Modes from \"./pages/modes.js\"\r\nimport Dynamic from \"./pages/dynamic.js\"\r\nimport Spotify from \"spotify-web-api-js\";\r\nconst spotifyWebApi = new Spotify();\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.params = this.getHashParams();\r\n    this.state = {\r\n      loggedIn: this.params.access_token ? true : false,\r\n    };\r\n    // If access token is available, store it in local storage to be available at all pages\r\n    if (this.params.access_token) {\r\n      spotifyWebApi.setAccessToken(this.params.access_token)\r\n      localStorage.setItem(\"access_token\", this.params.access_token)\r\n    }\r\n  }\r\n  getHashParams() {\r\n    var hashParams = {};\r\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\r\n        q = window.location.hash.substring(1);\r\n    while ((e = r.exec(q))) {\r\n        hashParams[e[1]] = decodeURIComponent(e[2]);\r\n    }\r\n    return hashParams;\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/modes\" component={Modes}/>\r\n            <Route path=\"/youtube\" component={Youtube}/>\r\n            <Route path=\"/dynamic\" component={Dynamic} />\r\n            <Route path=\"/pickPlaylist\" component={PickPlaylist}/>\r\n            <Route path=\"/\" component={Home} />\r\n          </Switch>\r\n        </Router> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}