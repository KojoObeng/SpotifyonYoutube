{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kwadw\\\\OneDrive\\\\Documents\\\\Grind\\\\Projects\\\\React Projects\\\\Spotify\\\\spotify\\\\src\\\\pages\\\\youtube.js\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\nimport \"../css/youtube.css\";\nimport Spotify from 'spotify-web-api-js';\nconst spotifyWebApi = new Spotify();\n\nclass Youtube extends Component {\n  constructor(props) {\n    super(props); // Get access token to make calls\n\n    this.loadVideo = id => {\n      this.player = new window.YT.Player('player', {\n        host: \"https://www.youtube.com\",\n        height: '640',\n        width: '1320',\n        videoId: 'M7lc1UVf-VE',\n        playerVars: {\n          controls: 1,\n          autoplay: 0,\n          disablekb: 1,\n          enablejsapi: 1,\n          origin: \"https://localhost:3000\"\n        },\n        events: {\n          'onReady': this.onPlayerReady,\n          'onStateChange': this.onPlayerStateChange\n        }\n      });\n    };\n\n    spotifyWebApi.setAccessToken(localStorage.getItem(\"access_token\")); // Start off by saving details of this playlist to localstorage if it is available\n\n    if (this.props.location.tracks) {\n      localStorage.setItem(\"tracks\", JSON.stringify(this.shuffleArray(this.props.location.tracks)));\n      localStorage.setItem(\"playlist\", JSON.stringify(this.props.location.playlistName));\n      localStorage.setItem(\"length\", JSON.stringify(this.props.location.tracks.length));\n    } // Search Terms syntax is - [\"title\", \"spotify-id\", index in the search-terms array]\n\n\n    this.state = {\n      apiKey: \"AIzaSyAUlBPBvCwXcYNNahVcmWPKphhIs4YjaWQ\",\n      search_terms: localStorage.getItem(\"tracks\") ? JSON.parse(localStorage.getItem(\"tracks\")).map((track, index) => {\n        return [track.artists[0] + \" - \" + track.track_name, track.id, index];\n      }) : \"\",\n      current_index: 0,\n      length: JSON.parse(localStorage.getItem(\"length\")),\n      query_IDs: new Array(JSON.parse(localStorage.getItem(\"length\")))\n    };\n    this.search = this.search.bind(this);\n    this.loadVideo = this.loadVideo.bind(this);\n  }\n\n  componentDidMount() {\n    // Create this.state.query_IDs by running Youtube API search\n    for (let i = 0; i < 5; i++) {\n      if (i < this.state.length) {\n        this.search(this.state.search_terms[i]);\n      }\n    }\n\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      console.log(response);\n\n      if (response === \"\") {\n        console.log(\"nothing has been playing for the past 15 minutes\");\n      } else if (response !== \"\" & response.is_playing === false) {\n        console.log(\"nothing is currently playing right now\"); // spotifyWebApi.play((response) => {\n        //     console.log(\"play\");\n        // })\n      } else {\n        console.log(response.is_playing);\n        console.log(response.item.name);\n        console.log(response.item.artists[0].name);\n        console.log(response.item.id); // spotifyWebApi.pause((response) => {\n        //     console.log(response, \"stop\");\n        // })\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      window.onYouTubeIframeAPIReady = this.loadVideo;\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    } else {\n      this.loadVideo();\n    }\n  }\n\n  shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n\n    return array;\n  }\n\n  onPlayerStateChange(e) {\n    if (e.data === window.YT.PlayerState.PLAYING) {\n      console.log('playing');\n    }\n\n    if (e.data === window.YT.PlayerState.PAUSED) {\n      console.log(\"YouTube Video is PAUSED!!\");\n    }\n\n    if (e.data === window.YT.PlayerState.ENDED) {\n      console.log(\"YouTube Video is ENDING!!\");\n    }\n  }\n\n  onPlayerReady(e) {\n    e.target.playVideo();\n  }\n\n  async search(search_term) {\n    var query = search_term[0];\n    axios.get(\"https://www.googleapis.com/youtube/v3/search?key=\" + this.state.apiKey + \"&q=\" + query + \"&part=snippet&maxResults=1&type=video\").then(response => {\n      // var joined = this.state.query_IDs.concat(response.data.items[0].id.videoId);\n      var changed = this.state.query_IDs; // search_term[2]] is the index of the original search. Set that same index in the query_IDS to the youtube-video-id\n\n      changed[search_term[2]] = response.data.items[0].id.videoId;\n      this.setState({\n        query_IDs: changed\n      }, () => {\n        console.log(this.state.query_IDs);\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  createButtons() {\n    var button_list = [];\n    var current_index = this.state.current_index;\n    var size = this.state.length;\n    var playlist_tracks = this.state.search_terms;\n\n    if (current_index >= 1) {\n      button_list.push(button_list.push( /*#__PURE__*/React.createElement(Button, {\n        className: \"spotify-youtube-previous-button\",\n        key: playlist_tracks[current_index - 1][1],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 47\n        }\n      }, \"  \", playlist_tracks[current_index - 1][0], \" \")));\n    }\n\n    button_list.push( /*#__PURE__*/React.createElement(Button, {\n      className: \"spotify-youtube-current-button\",\n      key: playlist_tracks[current_index][1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 26\n      }\n    }, \"  \", playlist_tracks[current_index][0], \" \"));\n\n    for (let i = current_index; i < current_index + 5; i++) {\n      if (i < size - 1) {\n        button_list.push( /*#__PURE__*/React.createElement(Button, {\n          className: \"spotify-youtube-next-buttons\",\n          key: playlist_tracks[i][1],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 34\n          }\n        }, \"  \", playlist_tracks[i][0], \" \"));\n      }\n    }\n\n    return button_list;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/pickPlaylist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"spotify-youtube-back-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 25\n      }\n    }, \"Back\")), this.createButtons()), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 18\n      }\n    }));\n  }\n\n}\n\nexport default Youtube; // https://github.com/tjallingt/react-youtube\n// const opts = {\n//     height: '400',\n//     width: '640',\n//     origin: \"https://localhost:8000\",\n//     widget_referrer: \"https://localhost:8000\",\n//     playerVars: {\n//         enablejsapi: 1,\n//         playlist: [],\n//     }\n// }","map":{"version":3,"sources":["C:/Users/Kwadw/OneDrive/Documents/Grind/Projects/React Projects/Spotify/spotify/src/pages/youtube.js"],"names":["axios","React","Component","Link","Button","Spotify","spotifyWebApi","Youtube","constructor","props","loadVideo","id","player","window","YT","Player","host","height","width","videoId","playerVars","controls","autoplay","disablekb","enablejsapi","origin","events","onPlayerReady","onPlayerStateChange","setAccessToken","localStorage","getItem","location","tracks","setItem","JSON","stringify","shuffleArray","playlistName","length","state","apiKey","search_terms","parse","map","track","index","artists","track_name","current_index","query_IDs","Array","search","bind","componentDidMount","i","getMyCurrentPlaybackState","then","response","console","log","is_playing","item","name","catch","error","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","array","j","Math","floor","random","e","data","PlayerState","PLAYING","PAUSED","ENDED","target","playVideo","search_term","query","get","changed","items","setState","createButtons","button_list","size","playlist_tracks","push","render"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport {Link} from \"react-router-dom\"\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"../css/youtube.css\"\r\nimport Spotify from 'spotify-web-api-js'\r\n\r\nconst spotifyWebApi =  new Spotify();\r\nclass Youtube extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Get access token to make calls\r\n        spotifyWebApi.setAccessToken(localStorage.getItem(\"access_token\"));\r\n\r\n        // Start off by saving details of this playlist to localstorage if it is available\r\n        if  (this.props.location.tracks) {\r\n            localStorage.setItem(\"tracks\",  JSON.stringify(this.shuffleArray(this.props.location.tracks)))\r\n            localStorage.setItem(\"playlist\", JSON.stringify(this.props.location.playlistName))\r\n            localStorage.setItem(\"length\", JSON.stringify(this.props.location.tracks.length))\r\n        }\r\n        // Search Terms syntax is - [\"title\", \"spotify-id\", index in the search-terms array]\r\n        this.state = {\r\n            apiKey: \"AIzaSyAUlBPBvCwXcYNNahVcmWPKphhIs4YjaWQ\",\r\n            search_terms: localStorage.getItem(\"tracks\") ? \r\n            JSON.parse(localStorage.getItem(\"tracks\")).map((track, index) => {\r\n                return [track.artists[0] + \" - \" + track.track_name, track.id, index];\r\n            }) : \"\",\r\n            current_index: 0,\r\n            length: JSON.parse(localStorage.getItem(\"length\")),\r\n            query_IDs: new Array(JSON.parse(localStorage.getItem(\"length\")))\r\n        }\r\n\r\n        this.search = this.search.bind(this)\r\n        this.loadVideo = this.loadVideo.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        // Create this.state.query_IDs by running Youtube API search\r\n        for (let i=0; i<5; i++) {\r\n            if (i < this.state.length) {\r\n                this.search(this.state.search_terms[i])\r\n            }\r\n        }\r\n\r\n        spotifyWebApi.getMyCurrentPlaybackState().then((response) => {\r\n            console.log(response)\r\n            if (response === \"\") {\r\n                console.log(\"nothing has been playing for the past 15 minutes\")\r\n            }\r\n            else if ((response !== \"\") & (response.is_playing===false)) {\r\n                console.log(\"nothing is currently playing right now\")\r\n                // spotifyWebApi.play((response) => {\r\n                //     console.log(\"play\");\r\n                // })\r\n            }\r\n            else {\r\n                console.log(response.is_playing)\r\n                console.log(response.item.name)\r\n                console.log(response.item.artists[0].name)\r\n                console.log(response.item.id)\r\n                // spotifyWebApi.pause((response) => {\r\n                //     console.log(response, \"stop\");\r\n                // })\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n\r\n        if (!window.YT) {\r\n            const tag = document.createElement('script');\r\n            tag.src = 'https://www.youtube.com/iframe_api'\r\n            window.onYouTubeIframeAPIReady = this.loadVideo;\r\n            const firstScriptTag = document.getElementsByTagName('script')[0];\r\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n        }\r\n        else {\r\n            this.loadVideo();\r\n        }\r\n    }\r\n\r\n    loadVideo = (id) => {\r\n        this.player = new window.YT.Player('player', {\r\n            host: \"https://www.youtube.com\",\r\n            height: '640',\r\n            width: '1320',\r\n            videoId: 'M7lc1UVf-VE',\r\n            playerVars: {\r\n                controls: 1,\r\n                autoplay: 0,\r\n                disablekb: 1,\r\n                enablejsapi: 1,\r\n                origin: \"https://localhost:3000\"\r\n            },\r\n            events: {\r\n                'onReady': this.onPlayerReady,\r\n                'onStateChange': this.onPlayerStateChange,\r\n            }\r\n        });\r\n    }\r\n    shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array\r\n    }\r\n\r\n    onPlayerStateChange(e) {\r\n        if (e.data === window.YT.PlayerState.PLAYING) {\r\n            console.log('playing')\r\n        }\r\n        if (e.data === window.YT.PlayerState.PAUSED) {\r\n            console.log(\"YouTube Video is PAUSED!!\");\r\n        }\r\n        if (e.data === window.YT.PlayerState.ENDED) {\r\n            console.log(\"YouTube Video is ENDING!!\");\r\n        }\r\n    }\r\n\r\n    onPlayerReady(e) {\r\n        e.target.playVideo();\r\n    }\r\n    async search(search_term) {\r\n        var query = search_term[0]\r\n        axios\r\n        .get(\"https://www.googleapis.com/youtube/v3/search?key=\" + this.state.apiKey + \"&q=\" + query + \"&part=snippet&maxResults=1&type=video\")\r\n        .then((response) => {\r\n            // var joined = this.state.query_IDs.concat(response.data.items[0].id.videoId);\r\n            var changed = this.state.query_IDs\r\n            // search_term[2]] is the index of the original search. Set that same index in the query_IDS to the youtube-video-id\r\n            changed[search_term[2]] = response.data.items[0].id.videoId\r\n            this.setState({\r\n                query_IDs: changed, \r\n            }, () => {\r\n                console.log(this.state.query_IDs)\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        });\r\n    } \r\n\r\n    createButtons() {\r\n        var button_list = []\r\n        var current_index = this.state.current_index;\r\n        var size = this.state.length;\r\n        var playlist_tracks = this.state.search_terms;\r\n\r\n        if (current_index >= 1) {\r\n            button_list.push(button_list.push(<Button className=\"spotify-youtube-previous-button\" key={playlist_tracks[current_index-1][1]}>  {playlist_tracks[current_index-1][0]} </Button>))\r\n        }\r\n        button_list.push(<Button className=\"spotify-youtube-current-button\" key={playlist_tracks[current_index][1]}>  {playlist_tracks[current_index][0]} </Button>)\r\n        \r\n        for (let i=current_index; i < current_index+5; i++) {\r\n            if (i < size-1) {\r\n                button_list.push(<Button className=\"spotify-youtube-next-buttons\" key={playlist_tracks[i][1]}>  {playlist_tracks[i][0]} </Button>)\r\n            }\r\n        }\r\n        return button_list\r\n    }\r\n    render() {\r\n        return(\r\n            <div>\r\n                <div className=\"button-container\">\r\n                    <Link to=\"/pickPlaylist\">\r\n                        <Button className=\"spotify-youtube-back-button\">\r\n                            Back\r\n                        </Button>\r\n                    </Link>\r\n                    {this.createButtons()}\r\n                </div>\r\n                 <div id=\"player\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n  \r\n\r\nexport default Youtube\r\n\r\n// https://github.com/tjallingt/react-youtube\r\n\r\n        // const opts = {\r\n        //     height: '400',\r\n        //     width: '640',\r\n        //     origin: \"https://localhost:8000\",\r\n        //     widget_referrer: \"https://localhost:8000\",\r\n        //     playerVars: {\r\n        //         enablejsapi: 1,\r\n        //         playlist: [],\r\n\r\n        //     }\r\n        // }"]},"metadata":{},"sourceType":"module"}