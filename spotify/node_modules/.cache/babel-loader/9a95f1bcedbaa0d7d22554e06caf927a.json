{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kwadw\\\\OneDrive\\\\Documents\\\\Grind\\\\Projects\\\\React Projects\\\\Spotify\\\\spotify\\\\src\\\\components\\\\PlaylistButton.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Spotify from \"spotify-web-api-js\";\nimport { Button } from \"react-bootstrap\";\nimport \"../css/pickPlaylist.css\";\nconst spotifyWebApi = new Spotify();\n\nclass PlaylistButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tracks: []\n    };\n    this.handleClick.bind(this);\n  }\n\n  handleClick(playlistID) {\n    let forLoop = new Promise((resolve, reject) => {\n      var numOfTracks = 0;\n      spotifyWebApi.getPlaylistTracks(playlistID).then(response => {\n        numOfTracks = response.total;\n        var i;\n\n        for (i = 0; i < Math.ceil(numOfTracks / 100); i++) {\n          spotifyWebApi.getPlaylistTracks(playlistID, {\n            offset: i * 100\n          }).then(response => {\n            this.setState({\n              tracks: [this.state.tracks, ...response.items.map(item => {\n                return {\n                  album_name: item.track.album.name,\n                  album_images: item.track.album.images,\n                  artists: item.track.artists.map(artist => {\n                    return artist.name;\n                  }),\n                  duration: item.track.duration_ms,\n                  track_name: item.track.name,\n                  date: item.added_at\n                };\n              })]\n            });\n          });\n        }\n      });\n\n      if (this.state.tracks.length === numOfTracks) {\n        resolve();\n      } else {\n        reject('not did');\n      }\n    });\n    forLoop.then(response => {\n      console.log(response);\n    }).catch(response => {\n      console.log(response);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"playlist-button-and-image-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"playlist-button\",\n      onClick: () => {\n        this.handleClick(this.props.id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, this.props.name), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"playlist-image\",\n      src: this.props.image,\n      alt: this.props.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Link, {\n      to: {\n        pathname: \"/youtube\",\n        playlist: \"x\",\n        tracks: this.state.tracks\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }));\n  }\n\n} // <Button className=\"playlist-number\">{this.props.index} </Button>\n\n\nexport default PlaylistButton;","map":{"version":3,"sources":["C:/Users/Kwadw/OneDrive/Documents/Grind/Projects/React Projects/Spotify/spotify/src/components/PlaylistButton.js"],"names":["React","Component","Link","Spotify","Button","spotifyWebApi","PlaylistButton","constructor","props","state","tracks","handleClick","bind","playlistID","forLoop","Promise","resolve","reject","numOfTracks","getPlaylistTracks","then","response","total","i","Math","ceil","offset","setState","items","map","item","album_name","track","album","name","album_images","images","artists","artist","duration","duration_ms","track_name","date","added_at","length","console","log","catch","render","id","image","pathname","playlist"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {Link} from \"react-router-dom\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Spotify from \"spotify-web-api-js\";\r\nimport {\r\n    Button\r\n  } from \"react-bootstrap\";\r\nimport \"../css/pickPlaylist.css\"\r\n\r\nconst spotifyWebApi = new Spotify();\r\n\r\nclass PlaylistButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tracks: [],\r\n        }\r\n        this.handleClick.bind(this);\r\n    }\r\n    handleClick(playlistID) {\r\n        let forLoop = new Promise((resolve, reject)  => {\r\n            var numOfTracks = 0;\r\n            spotifyWebApi.getPlaylistTracks(playlistID).then((response) => {\r\n                numOfTracks =  response.total;\r\n                var i;\r\n                for (i=0; i < Math.ceil(numOfTracks / 100); i++) {\r\n                    spotifyWebApi.getPlaylistTracks(playlistID, {offset: i*100}).then((response) => {\r\n                        this.setState({tracks: [this.state.tracks, ...response.items.map((item) => {\r\n                            return  {\r\n                                album_name: item.track.album.name,\r\n                                album_images: item.track.album.images,\r\n                                artists: item.track.artists.map((artist) => {return artist.name}),\r\n                                duration: item.track.duration_ms,\r\n                                track_name: item.track.name,\r\n                                date: item.added_at,\r\n                            }\r\n                        })]});\r\n                    })\r\n                }\r\n            })\r\n            if (this.state.tracks.length === numOfTracks) {\r\n                resolve()\r\n            }\r\n            else {\r\n                reject('not did')\r\n            }\r\n        })\r\n        forLoop.then((response) => { console.log(response)}).catch((response) => { console.log(response)})\r\n    }\r\n    render () {\r\n        return(\r\n            <div className=\"playlist-button-and-image-container\">\r\n            <Button className=\"playlist-button\" onClick={() => {this.handleClick(this.props.id)}}>{this.props.name}</Button>\r\n            <img className=\"playlist-image\" src={this.props.image} alt={this.props.name}/>\r\n            <Link to= {{\r\n                pathname: \"/youtube\",\r\n                playlist: \"x\",\r\n                tracks: this.state.tracks,\r\n            }}>\r\n            </Link>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n// <Button className=\"playlist-number\">{this.props.index} </Button>\r\nexport default PlaylistButton"]},"metadata":{},"sourceType":"module"}