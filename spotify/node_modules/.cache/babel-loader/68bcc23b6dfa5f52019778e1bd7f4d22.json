{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kwadw\\\\OneDrive\\\\Documents\\\\Grind\\\\Projects\\\\React Projects\\\\Spotify\\\\spotify\\\\src\\\\pages\\\\youtube.js\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport PlaylistButton from \"../components/PlaylistButton\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\nimport \"../css/pickPlaylist.css\";\n\nclass Youtube extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiKey: \"AIzaSyAUlBPBvCwXcYNNahVcmWPKphhIs4YjaWQ\",\n      // search_terms: this.props.location.tracks.map((track) => {\n      //     return track.artists[0] + \" \" + track.track_name;\n      // }),\n      query_IDs: []\n    };\n    const opts = {\n      height: '400',\n      width: '640',\n      playerVars: {\n        enablejsapi: 1,\n        playlist: []\n      }\n    };\n    this.search = this.search.bind(this);\n  }\n\n  componentDidMount() {\n    // this.state.search_terms.forEach((search_term, index) => {\n    //     this.search(search_term, index)\n    //     console.log(search_term, index)\n    // })\n    if (document.getElementById(\"youtube-player1\") !== null) {\n      var element = document.getElementById(\"youtube-player1\");\n      element.remove();\n    }\n\n    const tag = document.createElement('script');\n    tag.src = 'https://www.youtube.com/iframe_api';\n    tag.id = 'youtube-player1';\n    const firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n    window.onYouTubeIframeAPIReady = e => {\n      this.YT = window.YT;\n      this.player = new window.YT.Player('player', {\n        height: '640',\n        width: '1320',\n        videoId: 'M7lc1UVf-VE',\n        playerVars: {\n          controls: 1,\n          autoplay: 0,\n          disablekb: 1,\n          enablejsapi: 1\n        },\n        events: {\n          'onReady': this.onPlayerReady,\n          'onStateChange': this.onPlayerStateChange\n        }\n      });\n    };\n  }\n\n  onPlayerStateChange(e) {\n    if (e.data === window.YT.PlayerState.PLAYING) {\n      console.log('playing');\n    }\n\n    if (e.data == window.YT.PlayerState.PAUSED) {\n      console.log(\"YouTube Video is PAUSED!!\");\n    }\n\n    if (e.data == window.YT.PlayerState.ENDED) {\n      console.log(\"YouTube Video is ENDING!!\");\n    }\n  }\n\n  onPlayerReady(e) {\n    e.target.playVideo();\n  }\n\n  async search(query, index) {\n    await axios.get(\"https://www.googleapis.com/youtube/v3/search?key=\" + this.state.apiKey + \"&q=\" + query + \"&part=snippet&maxResults=2&type=video\").then(response => {\n      this.setState({\n        query_IDs: this.state.query_IDs.push([index, query, response.data.items[0].id.videoId])\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/pickPlaylist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"spotify-youtube-back-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, \"Back\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 18\n      }\n    }));\n  }\n\n}\n\nexport default Youtube; // https://github.com/tjallingt/react-youtube","map":{"version":3,"sources":["C:/Users/Kwadw/OneDrive/Documents/Grind/Projects/React Projects/Spotify/spotify/src/pages/youtube.js"],"names":["axios","React","Component","PlaylistButton","Link","Button","Youtube","constructor","props","state","apiKey","query_IDs","opts","height","width","playerVars","enablejsapi","playlist","search","bind","componentDidMount","document","getElementById","element","remove","tag","createElement","src","id","firstScriptTag","getElementsByTagName","parentNode","insertBefore","window","onYouTubeIframeAPIReady","e","YT","player","Player","videoId","controls","autoplay","disablekb","events","onPlayerReady","onPlayerStateChange","data","PlayerState","PLAYING","console","log","PAUSED","ENDED","target","playVideo","query","index","get","then","response","setState","push","items","catch","error","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAO,yBAAP;;AAEA,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAC5BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,yCADC;AAET;AACA;AACA;AACAC,MAAAA,SAAS,EAAE;AALF,KAAb;AAOA,UAAMC,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,KAAK,EAAE,KAFE;AAGTC,MAAAA,UAAU,EAAE;AACRC,QAAAA,WAAW,EAAE,CADL;AAERC,QAAAA,QAAQ,EAAE;AAFF;AAHH,KAAb;AASA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACH;;AACDC,EAAAA,iBAAiB,GAAG;AAEhB;AACA;AACA;AACA;AACA,QAAIC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,MAA+C,IAAnD,EAAyD;AACrD,UAAIC,OAAO,GAAGF,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAAd;AACAC,MAAAA,OAAO,CAACC,MAAR;AACH;;AACG,UAAMC,GAAG,GAAGJ,QAAQ,CAACK,aAAT,CAAuB,QAAvB,CAAZ;AACAD,IAAAA,GAAG,CAACE,GAAJ,GAAU,oCAAV;AACAF,IAAAA,GAAG,CAACG,EAAJ,GAAS,iBAAT;AACA,UAAMC,cAAc,GAAGR,QAAQ,CAACS,oBAAT,CAA8B,QAA9B,EAAwC,CAAxC,CAAvB;AACAD,IAAAA,cAAc,CAACE,UAAf,CAA0BC,YAA1B,CAAuCP,GAAvC,EAA4CI,cAA5C;;AAEJI,IAAAA,MAAM,CAACC,uBAAP,GAAkCC,CAAD,IAAO;AACpC,WAAKC,EAAL,GAAUH,MAAM,CAACG,EAAjB;AACA,WAAKC,MAAL,GAAc,IAAIJ,MAAM,CAACG,EAAP,CAAUE,MAAd,CAAqB,QAArB,EAA+B;AACzCzB,QAAAA,MAAM,EAAE,KADiC;AAEzCC,QAAAA,KAAK,EAAE,MAFkC;AAGzCyB,QAAAA,OAAO,EAAE,aAHgC;AAIzCxB,QAAAA,UAAU,EAAE;AACRyB,UAAAA,QAAQ,EAAE,CADF;AAERC,UAAAA,QAAQ,EAAE,CAFF;AAGRC,UAAAA,SAAS,EAAE,CAHH;AAIR1B,UAAAA,WAAW,EAAE;AAJL,SAJ6B;AAUzC2B,QAAAA,MAAM,EAAE;AACJ,qBAAW,KAAKC,aADZ;AAEJ,2BAAiB,KAAKC;AAFlB;AAViC,OAA/B,CAAd;AAeH,KAjBD;AAkBH;;AAEDA,EAAAA,mBAAmB,CAACV,CAAD,EAAI;AACnB,QAAIA,CAAC,CAACW,IAAF,KAAWb,MAAM,CAACG,EAAP,CAAUW,WAAV,CAAsBC,OAArC,EAA8C;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH;;AACD,QAAIf,CAAC,CAACW,IAAF,IAAUb,MAAM,CAACG,EAAP,CAAUW,WAAV,CAAsBI,MAApC,EAA4C;AACxCF,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH;;AACD,QAAIf,CAAC,CAACW,IAAF,IAAUb,MAAM,CAACG,EAAP,CAAUW,WAAV,CAAsBK,KAApC,EAA2C;AACvCH,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH;AAGJ;;AAEDN,EAAAA,aAAa,CAACT,CAAD,EAAI;AACbA,IAAAA,CAAC,CAACkB,MAAF,CAASC,SAAT;AACH;;AACD,QAAMpC,MAAN,CAAaqC,KAAb,EAAoBC,KAApB,EAA2B;AACvB,UAAMxD,KAAK,CACVyD,GADK,CACD,sDAAsD,KAAKhD,KAAL,CAAWC,MAAjE,GAA0E,KAA1E,GAAkF6C,KAAlF,GAA0F,uCADzF,EAELG,IAFK,CAECC,QAAD,IAAc;AAChB,WAAKC,QAAL,CAAc;AACTjD,QAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWE,SAAX,CAAqBkD,IAArB,CAA0B,CAACL,KAAD,EAAQD,KAAR,EAAeI,QAAQ,CAACb,IAAT,CAAcgB,KAAd,CAAoB,CAApB,EAAuBlC,EAAvB,CAA0BW,OAAzC,CAA1B;AADF,OAAd;AAGH,KANK,EAOLwB,KAPK,CAOEC,KAAD,IAAW;AACdf,MAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AACH,KATK,CAAN;AAUH;;AACDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,eAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,6BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ,eAMK;AAAK,MAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANL,CADJ;AAUH;;AAjG2B;;AAuGhC,eAAe3D,OAAf,C,CAEA","sourcesContent":["import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport PlaylistButton from \"../components/PlaylistButton\"\r\nimport {Link} from \"react-router-dom\"\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"../css/pickPlaylist.css\"\r\n\r\nclass Youtube extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            apiKey: \"AIzaSyAUlBPBvCwXcYNNahVcmWPKphhIs4YjaWQ\",\r\n            // search_terms: this.props.location.tracks.map((track) => {\r\n            //     return track.artists[0] + \" \" + track.track_name;\r\n            // }),\r\n            query_IDs: [],\r\n        }\r\n        const opts = {\r\n            height: '400',\r\n            width: '640',\r\n            playerVars: {\r\n                enablejsapi: 1,\r\n                playlist: [],\r\n            }\r\n        }\r\n\r\n        this.search = this.search.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        \r\n        // this.state.search_terms.forEach((search_term, index) => {\r\n        //     this.search(search_term, index)\r\n        //     console.log(search_term, index)\r\n        // })\r\n        if (document.getElementById(\"youtube-player1\") !== null) {\r\n            var element = document.getElementById(\"youtube-player1\");\r\n            element.remove();\r\n        }\r\n            const tag = document.createElement('script');\r\n            tag.src = 'https://www.youtube.com/iframe_api';\r\n            tag.id = 'youtube-player1';\r\n            const firstScriptTag = document.getElementsByTagName('script')[0];\r\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n\r\n        window.onYouTubeIframeAPIReady = (e) => {\r\n            this.YT = window.YT;\r\n            this.player = new window.YT.Player('player', {\r\n                height: '640',\r\n                width: '1320',\r\n                videoId: 'M7lc1UVf-VE',\r\n                playerVars: {\r\n                    controls: 1,\r\n                    autoplay: 0,\r\n                    disablekb: 1,\r\n                    enablejsapi: 1,\r\n                },\r\n                events: {\r\n                    'onReady': this.onPlayerReady,\r\n                    'onStateChange': this.onPlayerStateChange,\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    onPlayerStateChange(e) {\r\n        if (e.data === window.YT.PlayerState.PLAYING) {\r\n            console.log('playing')\r\n        }\r\n        if (e.data == window.YT.PlayerState.PAUSED) {\r\n            console.log(\"YouTube Video is PAUSED!!\");\r\n        }\r\n        if (e.data == window.YT.PlayerState.ENDED) {\r\n            console.log(\"YouTube Video is ENDING!!\");\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onPlayerReady(e) {\r\n        e.target.playVideo();\r\n    }\r\n    async search(query, index) {\r\n        await axios\r\n        .get(\"https://www.googleapis.com/youtube/v3/search?key=\" + this.state.apiKey + \"&q=\" + query + \"&part=snippet&maxResults=2&type=video\")\r\n        .then((response) => {\r\n            this.setState({\r\n                 query_IDs: this.state.query_IDs.push([index, query, response.data.items[0].id.videoId])\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        });\r\n    } \r\n    render() {\r\n        return(\r\n            <div>\r\n                <Link to=\"/pickPlaylist\">\r\n                    <Button className=\"spotify-youtube-back-button\">\r\n                        Back\r\n                    </Button>\r\n                </Link>\r\n                 <div id=\"player\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n  \r\n\r\nexport default Youtube\r\n\r\n// https://github.com/tjallingt/react-youtube"]},"metadata":{},"sourceType":"module"}