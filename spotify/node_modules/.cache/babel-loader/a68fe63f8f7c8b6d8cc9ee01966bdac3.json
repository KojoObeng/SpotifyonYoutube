{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kwadw\\\\OneDrive\\\\Documents\\\\Grind\\\\Projects\\\\React Projects\\\\Spotify\\\\spotify\\\\src\\\\pages\\\\pickPlaylist.js\";\nimport React, { Component } from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport PlaylistButton from \"../components/PlaylistButton\";\nimport \"../css/pickPlaylist.css\";\nimport PlaylistNavigation from \"../components/PlaylistNavBar\";\nconst spotifyWebApi = new Spotify();\n\nclass PickPlaylist extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playlists: []\n    };\n    this.getPlaylists = this.getPlaylists.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    spotifyWebApi.setAccessToken(localStorage.getItem(\"access_token\"));\n  }\n\n  componentWillMount() {\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentDidMount() {\n    this.getPlaylists();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  handleScroll(e) {\n    let lastScrollTop = 0;\n    const currentScrollTop = PlaylistNavigation.scrollTop;\n\n    if (!this.state.hidden && currentScrollTop > lastScrollTop) {\n      this.setState({\n        hidden: true\n      });\n    } else if (this.state.hidden) {\n      this.setState({\n        hidden: false\n      });\n    }\n\n    lastScrollTop = currentScrollTop;\n  }\n\n  getPlaylists() {\n    spotifyWebApi.getUserPlaylists().then(response => {\n      this.setState({\n        playlists: response.items\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"playlist-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require(\"../images/green-left-icon-arrow-left.png\"),\n      alt: \"Green Left Arrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(PlaylistNavigation, {\n      id: \"navbar\",\n      hidden: this.state.hidden,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"playlists-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, this.state.playlists.map((playlist, index) => /*#__PURE__*/React.createElement(PlaylistButton, {\n      key: playlist.name,\n      id: playlist.id,\n      index: index,\n      name: playlist.name,\n      image: playlist.images[0].url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default PickPlaylist;","map":{"version":3,"sources":["C:/Users/Kwadw/OneDrive/Documents/Grind/Projects/React Projects/Spotify/spotify/src/pages/pickPlaylist.js"],"names":["React","Component","Spotify","PlaylistButton","PlaylistNavigation","spotifyWebApi","PickPlaylist","constructor","props","state","playlists","getPlaylists","bind","handleScroll","setAccessToken","localStorage","getItem","componentWillMount","window","addEventListener","componentDidMount","componentWillUnmount","removeEventListener","e","lastScrollTop","currentScrollTop","scrollTop","hidden","setState","getUserPlaylists","then","response","items","catch","error","console","log","render","require","map","playlist","index","name","id","images","url"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Spotify from 'spotify-web-api-js';\r\nimport PlaylistButton from \"../components/PlaylistButton\"\r\nimport \"../css/pickPlaylist.css\"\r\nimport PlaylistNavigation from \"../components/PlaylistNavBar\"\r\n\r\nconst spotifyWebApi = new Spotify();\r\n\r\nclass PickPlaylist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playlists: [],\r\n        }\r\n        this.getPlaylists = this.getPlaylists.bind(this);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n        spotifyWebApi.setAccessToken(localStorage.getItem(\"access_token\"))\r\n        \r\n    }\r\n    componentWillMount() {\r\n        window.addEventListener('scroll', this.handleScroll);\r\n    }\r\n    componentDidMount() {\r\n        this.getPlaylists()\r\n    }\r\n    componentWillUnmount () {\r\n        window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n    handleScroll (e) {\r\n        let lastScrollTop = 0;\r\n        const currentScrollTop = PlaylistNavigation.scrollTop;\r\n\r\n        if (!this.state.hidden && currentScrollTop > lastScrollTop) {\r\n          this.setState({ hidden: true });\r\n        } else if(this.state.hidden) {\r\n          this.setState({ hidden: false });\r\n        }\r\n        lastScrollTop = currentScrollTop;\r\n    }\r\n    getPlaylists () {\r\n        spotifyWebApi.getUserPlaylists()\r\n        .then((response) => {\r\n            this.setState({playlists: response.items})})\r\n        .catch((error) => {\r\n            console.log(error)\r\n        });\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"playlist-page\">\r\n                <img src={require(\"../images/green-left-icon-arrow-left.png\")} alt=\"Green Left Arrow\"></img>\r\n                <PlaylistNavigation id=\"navbar\" hidden={this.state.hidden}></PlaylistNavigation>\r\n                {/* <div className=\"pick-a-playlist-text\">\r\n                    Pick a playlist\r\n                </div> */}\r\n                <div className=\"playlists-container\">\r\n                    {this.state.playlists.map((playlist, index) => (\r\n                        <PlaylistButton key={playlist.name} id={playlist.id} index={index} name={playlist.name} image={playlist.images[0].url}></PlaylistButton>\r\n                        ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PickPlaylist;"]},"metadata":{},"sourceType":"module"}