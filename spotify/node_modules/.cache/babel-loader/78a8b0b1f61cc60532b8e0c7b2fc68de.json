{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kwadw\\\\OneDrive\\\\Documents\\\\Grind\\\\Projects\\\\React Projects\\\\Spotify\\\\spotify\\\\src\\\\pages\\\\youtube.js\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\nimport \"../css/pickPlaylist.css\";\nimport Spotify from 'spotify-web-api-js';\nconst spotifyWebApi = new Spotify();\n\nclass Youtube extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadVideo = id => {\n      this.player = new window.YT.Player('player', {\n        host: \"https://www.youtube.com\",\n        height: '640',\n        width: '1320',\n        videoId: 'M7lc1UVf-VE',\n        playerVars: {\n          controls: 1,\n          autoplay: 0,\n          disablekb: 1,\n          enablejsapi: 1,\n          origin: \"https://localhost:3000\"\n        },\n        events: {\n          'onReady': this.onPlayerReady,\n          'onStateChange': this.onPlayerStateChange\n        }\n      });\n    };\n\n    if (this.props.location.tracks) {\n      localStorage.setItem(\"tracks\", JSON.stringify(this.shuffleArray(this.props.location.tracks)));\n      localStorage.setItem(\"playlist\", JSON.stringify(this.props.location.playlistName));\n      localStorage.setItem(\"length\", JSON.stringify(this.props.location.tracks.length));\n    }\n\n    this.state = {\n      apiKey: \"AIzaSyAUlBPBvCwXcYNNahVcmWPKphhIs4YjaWQ\",\n      playingstate: \"\",\n      search_terms: localStorage.getItem(\"tracks\") ? JSON.parse(localStorage.getItem(\"tracks\")).map((track, index) => {\n        return [track.artists[0] + \" - \" + track.track_name, track.id, index];\n      }) : \"\",\n      current_playing: 2,\n      length: JSON.parse(localStorage.getItem(\"length\")),\n      query_ID: []\n    };\n    spotifyWebApi.setAccessToken(localStorage.getItem(\"access_token\"));\n    const opts = {\n      height: '400',\n      width: '640',\n      origin: \"https://localhost:8000\",\n      widget_referrer: \"https://localhost:8000\",\n      playerVars: {\n        enablejsapi: 1,\n        playlist: []\n      }\n    };\n    this.search = this.search.bind(this);\n    this.loadVideo = this.loadVideo.bind(this);\n  }\n\n  componentDidMount() {\n    for (let i = 0; i < this.state.search_terms.length; i++) {\n      this.search(this.state.search_terms[i][0], this.state.search_terms[i][1]);\n    }\n\n    console.log(this.state.query_ID);\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      console.log(response);\n\n      if (response === \"\") {\n        console.log(\"nothing has been playing for the past 15 minutes\");\n      } else if (response !== \"\" & response.is_playing === false) {\n        console.log(\"nothing is currently playing right now\"); // spotifyWebApi.play((response) => {\n        //     console.log(\"play\");\n        // })\n      } else {\n        console.log(response.is_playing);\n        console.log(response.item.name);\n        console.log(response.item.artists[0].name);\n        console.log(response.item.id); // spotifyWebApi.pause((response) => {\n        //     console.log(response, \"stop\");\n        // })\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      window.onYouTubeIframeAPIReady = this.loadVideo;\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    } else {\n      this.loadVideo();\n    }\n  }\n\n  shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n\n    return array;\n  }\n\n  onPlayerStateChange(e) {\n    if (e.data === window.YT.PlayerState.PLAYING) {\n      console.log('playing');\n    }\n\n    if (e.data === window.YT.PlayerState.PAUSED) {\n      console.log(\"YouTube Video is PAUSED!!\");\n    }\n\n    if (e.data === window.YT.PlayerState.ENDED) {\n      console.log(\"YouTube Video is ENDING!!\");\n    }\n  }\n\n  onPlayerReady(e) {\n    e.target.playVideo();\n  }\n\n  async search(query) {\n    axios.get(\"https://www.googleapis.com/youtube/v3/search?key=\" + this.state.apiKey + \"&q=\" + query + \"&part=snippet&maxResults=2&type=video\").then(response => {\n      var joined = this.state.query_ID.concat(response.data.items[0].id.videoId);\n      this.setState({\n        query_ID: joined\n      }, () => {\n        console.log(this.state.query_ID);\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  createButtons() {\n    var button_list = [];\n\n    for (let i = this.state.current_playing - 1; i < 4; i++) {\n      if (i >= 0 & i < this.state.length) {\n        button_list.push( /*#__PURE__*/React.createElement(Button, {\n          className: \"spotify-youtube-back-button\",\n          key: this.state.search_terms[i][1],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 34\n          }\n        }, \"  \", this.state.search_terms[i][0], \" \"));\n      }\n    }\n\n    return button_list;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/pickPlaylist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"spotify-youtube-back-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, \"Back\")), /*#__PURE__*/React.createElement(Button, {\n      className: \"spotify-youtube-back-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, \" Play \"), this.createButtons(), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 18\n      }\n    }));\n  }\n\n}\n\nexport default Youtube; // https://github.com/tjallingt/react-youtube","map":{"version":3,"sources":["C:/Users/Kwadw/OneDrive/Documents/Grind/Projects/React Projects/Spotify/spotify/src/pages/youtube.js"],"names":["axios","React","Component","Link","Button","Spotify","spotifyWebApi","Youtube","constructor","props","loadVideo","id","player","window","YT","Player","host","height","width","videoId","playerVars","controls","autoplay","disablekb","enablejsapi","origin","events","onPlayerReady","onPlayerStateChange","location","tracks","localStorage","setItem","JSON","stringify","shuffleArray","playlistName","length","state","apiKey","playingstate","search_terms","getItem","parse","map","track","index","artists","track_name","current_playing","query_ID","setAccessToken","opts","widget_referrer","playlist","search","bind","componentDidMount","i","console","log","getMyCurrentPlaybackState","then","response","is_playing","item","name","catch","error","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","array","j","Math","floor","random","e","data","PlayerState","PLAYING","PAUSED","ENDED","target","playVideo","query","get","joined","concat","items","setState","createButtons","button_list","push","render"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport {Link} from \"react-router-dom\"\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"../css/pickPlaylist.css\"\r\nimport Spotify from 'spotify-web-api-js'\r\n\r\nconst spotifyWebApi =  new Spotify();\r\nclass Youtube extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        if  (this.props.location.tracks) {\r\n            localStorage.setItem(\"tracks\",  JSON.stringify(this.shuffleArray(this.props.location.tracks)))\r\n            localStorage.setItem(\"playlist\", JSON.stringify(this.props.location.playlistName))\r\n            localStorage.setItem(\"length\", JSON.stringify(this.props.location.tracks.length))\r\n        }\r\n\r\n        this.state = {\r\n            apiKey: \"AIzaSyAUlBPBvCwXcYNNahVcmWPKphhIs4YjaWQ\",\r\n            playingstate: \"\",\r\n            search_terms: localStorage.getItem(\"tracks\") ? \r\n            JSON.parse(localStorage.getItem(\"tracks\")).map((track, index) => {\r\n                return [track.artists[0] + \" - \" + track.track_name, track.id, index];\r\n            }) : \"\",\r\n            current_playing: 2,\r\n            length: JSON.parse(localStorage.getItem(\"length\")),\r\n            query_ID: [],\r\n        }\r\n\r\n        spotifyWebApi.setAccessToken(localStorage.getItem(\"access_token\"));\r\n        const opts = {\r\n            height: '400',\r\n            width: '640',\r\n            origin: \"https://localhost:8000\",\r\n            widget_referrer: \"https://localhost:8000\",\r\n            playerVars: {\r\n                enablejsapi: 1,\r\n                playlist: [],\r\n\r\n            }\r\n        }\r\n\r\n        this.search = this.search.bind(this)\r\n        this.loadVideo = this.loadVideo.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        for (let i=0; i< this.state.search_terms.length; i++) {\r\n            this.search(this.state.search_terms[i][0], this.state.search_terms[i][1])\r\n        }\r\n        console.log(this.state.query_ID)\r\n        spotifyWebApi.getMyCurrentPlaybackState().then((response) => {\r\n            console.log(response)\r\n            if (response === \"\") {\r\n                console.log(\"nothing has been playing for the past 15 minutes\")\r\n            }\r\n            else if ((response !== \"\") & (response.is_playing===false)) {\r\n                console.log(\"nothing is currently playing right now\")\r\n                // spotifyWebApi.play((response) => {\r\n                //     console.log(\"play\");\r\n                // })\r\n            }\r\n            else {\r\n                console.log(response.is_playing)\r\n                console.log(response.item.name)\r\n                console.log(response.item.artists[0].name)\r\n                console.log(response.item.id)\r\n                // spotifyWebApi.pause((response) => {\r\n                //     console.log(response, \"stop\");\r\n                // })\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n\r\n        if (!window.YT) {\r\n            const tag = document.createElement('script');\r\n            tag.src = 'https://www.youtube.com/iframe_api'\r\n            window.onYouTubeIframeAPIReady = this.loadVideo;\r\n            const firstScriptTag = document.getElementsByTagName('script')[0];\r\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n        }\r\n        else {\r\n            this.loadVideo();\r\n        }\r\n    }\r\n\r\n    loadVideo = (id) => {\r\n        this.player = new window.YT.Player('player', {\r\n            host: \"https://www.youtube.com\",\r\n            height: '640',\r\n            width: '1320',\r\n            videoId: 'M7lc1UVf-VE',\r\n            playerVars: {\r\n                controls: 1,\r\n                autoplay: 0,\r\n                disablekb: 1,\r\n                enablejsapi: 1,\r\n                origin: \"https://localhost:3000\"\r\n            },\r\n            events: {\r\n                'onReady': this.onPlayerReady,\r\n                'onStateChange': this.onPlayerStateChange,\r\n            }\r\n        });\r\n    }\r\n    shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array\r\n    }\r\n\r\n    onPlayerStateChange(e) {\r\n        if (e.data === window.YT.PlayerState.PLAYING) {\r\n            console.log('playing')\r\n        }\r\n        if (e.data === window.YT.PlayerState.PAUSED) {\r\n            console.log(\"YouTube Video is PAUSED!!\");\r\n        }\r\n        if (e.data === window.YT.PlayerState.ENDED) {\r\n            console.log(\"YouTube Video is ENDING!!\");\r\n        }\r\n    }\r\n\r\n    onPlayerReady(e) {\r\n        e.target.playVideo();\r\n    }\r\n    async search(query) {\r\n        axios\r\n        .get(\"https://www.googleapis.com/youtube/v3/search?key=\" + this.state.apiKey + \"&q=\" + query + \"&part=snippet&maxResults=2&type=video\")\r\n        .then((response) => {\r\n            var joined = this.state.query_ID.concat(response.data.items[0].id.videoId);\r\n            this.setState({\r\n                query_ID: joined, \r\n            }, () => {\r\n                console.log(this.state.query_ID)\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        });\r\n    } \r\n\r\n    createButtons() {\r\n        var button_list = []\r\n        for (let i=this.state.current_playing-1; i < 4; i++) {\r\n            if ((i >= 0)  & (i < this.state.length)) {\r\n                button_list.push(<Button className=\"spotify-youtube-back-button\" key={this.state.search_terms[i][1]}>  {this.state.search_terms[i][0]} </Button>)\r\n            }\r\n        }\r\n        return button_list\r\n    }\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Link to=\"/pickPlaylist\">\r\n                    <Button className=\"spotify-youtube-back-button\">\r\n                        Back\r\n                    </Button>\r\n                </Link>\r\n                <Button className=\"spotify-youtube-back-button\"> Play </Button>\r\n                {this.createButtons()}\r\n                {/* <Button className=\"spotify-youtube-back-button\">  {this.state.search_terms[this.state.current_playing-1][0]} </Button>\r\n                <Button className=\"spotify-youtube-back-button\"> {this.state.search_terms[this.state.current_playing][0]}</Button>\r\n                <Button className=\"spotify-youtube-back-button\"> {this.state.search_terms[this.state.current_playing+1][0]}</Button> */}\r\n                 <div id=\"player\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n  \r\n\r\nexport default Youtube\r\n\r\n// https://github.com/tjallingt/react-youtube"]},"metadata":{},"sourceType":"module"}