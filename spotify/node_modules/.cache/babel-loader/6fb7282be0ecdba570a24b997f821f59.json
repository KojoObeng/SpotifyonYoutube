{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kwadw\\\\OneDrive\\\\Documents\\\\Grind\\\\Projects\\\\React Projects\\\\Spotify\\\\spotify\\\\src\\\\pages\\\\youtube.js\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport PlaylistButton from \"../components/PlaylistButton\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\nimport \"../css/pickPlaylist.css\";\nimport Spotify from 'spotify-web-api-js';\nconst spotifyWebApi = new Spotify();\n\nclass Youtube extends Component {\n  constructor(props) {\n    super(props); // if (this.props.history.tracks) {\n    //     localStorage.setItem(\"tracks\", this.props.history.tracks)\n    // }\n\n    this.loadVideo = () => {\n      this.player = new window.YT.Player('player', {\n        height: '640',\n        width: '1320',\n        videoId: 'M7lc1UVf-VE',\n        playerVars: {\n          controls: 1,\n          autoplay: 0,\n          disablekb: 1,\n          enablejsapi: 1\n        },\n        events: {\n          'onReady': this.onPlayerReady,\n          'onStateChange': this.onPlayerStateChange\n        }\n      });\n    };\n\n    this.state = {\n      apiKey: \"AIzaSyAUlBPBvCwXcYNNahVcmWPKphhIs4YjaWQ\",\n      playingstate: \"\",\n      // search_terms: localStorage.getItem(\"tracks\").map((track) => {\n      //     return track.artists[0] + \" \" + track.track_name;\n      // }),\n      query_IDs: []\n    };\n    spotifyWebApi.setAccessToken(localStorage.getItem(\"access_token\"));\n    const opts = {\n      height: '400',\n      width: '640',\n      playerVars: {\n        enablejsapi: 1,\n        playlist: []\n      }\n    };\n    this.search = this.search.bind(this);\n    this.loadVideo = this.loadVideo.bind(this);\n  }\n\n  componentDidMount() {\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      console.log(repsonse);\n\n      if (response === null) {\n        console.log(\"nothing has been playing for the past 15 minutes\");\n      } else if (response !== null & response.is_playing === false) {\n        console.log(\"nothing is currently playing right now\");\n        spotifyWebApi.play(response => {\n          console.log(\"play\");\n        });\n      } else {\n        console.log(response.is_playing);\n        console.log(response.item.name);\n        console.log(response.item.artists[0].name);\n        console.log(response.item.id);\n        spotifyWebApi.pause(response => {\n          console.log(response, \"stop\");\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n\n    if (!window.YT) {\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      window.onYouTubeIframeAPIReady = this.loadVideo;\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    } else {\n      this.loadVideo();\n    }\n  }\n\n  shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  onPlayerStateChange(e) {\n    if (e.data === window.YT.PlayerState.PLAYING) {\n      console.log('playing');\n    }\n\n    if (e.data === window.YT.PlayerState.PAUSED) {\n      console.log(\"YouTube Video is PAUSED!!\");\n    }\n\n    if (e.data === window.YT.PlayerState.ENDED) {\n      console.log(\"YouTube Video is ENDING!!\");\n    }\n  }\n\n  onPlayerReady(e) {\n    e.target.playVideo();\n  }\n\n  async search(query, index) {\n    await axios.get(\"https://www.googleapis.com/youtube/v3/search?key=\" + this.state.apiKey + \"&q=\" + query + \"&part=snippet&maxResults=2&type=video\").then(response => {\n      this.setState({\n        query_IDs: this.state.query_IDs.push([index, query, response.data.items[0].id.videoId])\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/pickPlaylist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"spotify-youtube-back-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }\n    }, \"Back\")), /*#__PURE__*/React.createElement(Button, {\n      className: \"spotify-youtube-back-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, \" Play \"), /*#__PURE__*/React.createElement(Button, {\n      className: \"spotify-youtube-back-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, \" Next1 \"), /*#__PURE__*/React.createElement(Button, {\n      className: \"spotify-youtube-back-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }, \" Next2\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 18\n      }\n    }));\n  }\n\n}\n\nexport default Youtube; // https://github.com/tjallingt/react-youtube","map":{"version":3,"sources":["C:/Users/Kwadw/OneDrive/Documents/Grind/Projects/React Projects/Spotify/spotify/src/pages/youtube.js"],"names":["axios","React","Component","PlaylistButton","Link","Button","Spotify","spotifyWebApi","Youtube","constructor","props","loadVideo","player","window","YT","Player","height","width","videoId","playerVars","controls","autoplay","disablekb","enablejsapi","events","onPlayerReady","onPlayerStateChange","state","apiKey","playingstate","query_IDs","setAccessToken","localStorage","getItem","opts","playlist","search","bind","componentDidMount","getMyCurrentPlaybackState","then","response","console","log","repsonse","is_playing","play","item","name","artists","id","pause","catch","error","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","shuffleArray","array","i","length","j","Math","floor","random","e","data","PlayerState","PLAYING","PAUSED","ENDED","target","playVideo","query","index","get","setState","push","items","render"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport PlaylistButton from \"../components/PlaylistButton\"\r\nimport {Link} from \"react-router-dom\"\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"../css/pickPlaylist.css\"\r\nimport Spotify from 'spotify-web-api-js'\r\n\r\nconst spotifyWebApi =  new Spotify();\r\nclass Youtube extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // if (this.props.history.tracks) {\r\n        //     localStorage.setItem(\"tracks\", this.props.history.tracks)\r\n        // }\r\n        this.state = {\r\n            apiKey: \"AIzaSyAUlBPBvCwXcYNNahVcmWPKphhIs4YjaWQ\",\r\n            playingstate: \"\",\r\n            // search_terms: localStorage.getItem(\"tracks\").map((track) => {\r\n            //     return track.artists[0] + \" \" + track.track_name;\r\n            // }),\r\n            query_IDs: [],\r\n        }\r\n        spotifyWebApi.setAccessToken(localStorage.getItem(\"access_token\"));\r\n        const opts = {\r\n            height: '400',\r\n            width: '640',\r\n            playerVars: {\r\n                enablejsapi: 1,\r\n                playlist: [],\r\n            }\r\n        }\r\n\r\n        this.search = this.search.bind(this)\r\n        this.loadVideo = this.loadVideo.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        spotifyWebApi.getMyCurrentPlaybackState().then((response) => {\r\n            console.log(repsonse)\r\n            if (response === null) {\r\n                console.log(\"nothing has been playing for the past 15 minutes\")\r\n            }\r\n            else if ((response !== null) & (response.is_playing===false)) {\r\n                console.log(\"nothing is currently playing right now\")\r\n                spotifyWebApi.play((response) => {\r\n                    console.log(\"play\");\r\n                })\r\n            }\r\n            else {\r\n                console.log(response.is_playing)\r\n                console.log(response.item.name)\r\n                console.log(response.item.artists[0].name)\r\n                console.log(response.item.id)\r\n                spotifyWebApi.pause((response) => {\r\n                    console.log(response, \"stop\");\r\n                })\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n\r\n        if (!window.YT) {\r\n            const tag = document.createElement('script');\r\n            tag.src = 'https://www.youtube.com/iframe_api'\r\n            window.onYouTubeIframeAPIReady = this.loadVideo;\r\n            const firstScriptTag = document.getElementsByTagName('script')[0];\r\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n        }\r\n        else {\r\n            this.loadVideo();\r\n        }\r\n    }\r\n\r\n    loadVideo = () => {\r\n        this.player = new window.YT.Player('player', {\r\n            height: '640',\r\n            width: '1320',\r\n            videoId: 'M7lc1UVf-VE',\r\n            playerVars: {\r\n                controls: 1,\r\n                autoplay: 0,\r\n                disablekb: 1,\r\n                enablejsapi: 1,\r\n            },\r\n            events: {\r\n                'onReady': this.onPlayerReady,\r\n                'onStateChange': this.onPlayerStateChange,\r\n            }\r\n        });\r\n    }\r\n    shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    }\r\n\r\n    onPlayerStateChange(e) {\r\n        if (e.data === window.YT.PlayerState.PLAYING) {\r\n            console.log('playing')\r\n        }\r\n        if (e.data === window.YT.PlayerState.PAUSED) {\r\n            console.log(\"YouTube Video is PAUSED!!\");\r\n        }\r\n        if (e.data === window.YT.PlayerState.ENDED) {\r\n            console.log(\"YouTube Video is ENDING!!\");\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onPlayerReady(e) {\r\n        e.target.playVideo();\r\n    }\r\n    async search(query, index) {\r\n        await axios\r\n        .get(\"https://www.googleapis.com/youtube/v3/search?key=\" + this.state.apiKey + \"&q=\" + query + \"&part=snippet&maxResults=2&type=video\")\r\n        .then((response) => {\r\n            this.setState({\r\n                 query_IDs: this.state.query_IDs.push([index, query, response.data.items[0].id.videoId])\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        });\r\n    } \r\n    render() {\r\n        return(\r\n            <div>\r\n                <Link to=\"/pickPlaylist\">\r\n                    <Button className=\"spotify-youtube-back-button\">\r\n                        Back\r\n                    </Button>\r\n                </Link>\r\n                <Button className=\"spotify-youtube-back-button\"> Play </Button>\r\n                <Button className=\"spotify-youtube-back-button\"> Next1 </Button>\r\n                <Button className=\"spotify-youtube-back-button\"> Next2</Button>\r\n                 <div id=\"player\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n  \r\n\r\nexport default Youtube\r\n\r\n// https://github.com/tjallingt/react-youtube"]},"metadata":{},"sourceType":"module"}