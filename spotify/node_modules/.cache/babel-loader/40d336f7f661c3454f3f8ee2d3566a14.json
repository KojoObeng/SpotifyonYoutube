{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kwadw\\\\OneDrive\\\\Documents\\\\Grind\\\\Projects\\\\React Projects\\\\Spotify\\\\spotify\\\\src\\\\pages\\\\youtube.js\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport YouTube from 'react-youtube';\nimport { Button } from \"react-bootstrap\";\nimport \"../css/pickPlaylist.css\";\n\nconst YTPlayer = require('yt-player');\n\nclass Youtube extends Component {\n  constructor() {\n    super();\n    this.state = {\n      apiKey: \"AIzaSyAUlBPBvCwXcYNNahVcmWPKphhIs4YjaWQ\",\n      searchTerm: \"\",\n      songName: \"\",\n      playlists: []\n    };\n    const opts = {\n      height: '400',\n      width: '640',\n      playerVars: {\n        enablejsapi: 1,\n        playlist: []\n      }\n    };\n    this.search = this.search.bind(this);\n    this.loadVideo = this.loadVideo.bind(this);\n  }\n\n  componentDidMount() {\n    const tag = document.createElement('script');\n    tag.src = 'https://www.youtube.com/iframe_api';\n    const firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    this.onYouTubeIframeAPIReady();\n  }\n\n  onYouTubeIframeAPIReady() {\n    player = new YT.Player('player', {\n      height: '390',\n      width: '640',\n      videoId: 'M7lc1UVf-VE',\n      events: {\n        'onReady': this.onPlayerReady,\n        'onStateChange': this.onPlayerStateChange\n      }\n    });\n    this.loadVideo(\"loliJVSwOiiwg\");\n  }\n\n  onPlayerReady(event) {\n    event.target.playVideo();\n  }\n\n  loadVideo(videoID) {\n    this.player = new window.YT.Player('player', {\n      videoId: videoID,\n      events: {\n        onReady: this.onPLayerReady\n      }\n    });\n  }\n\n  stopVideo() {\n    player.stopVideo();\n  }\n\n  onPlayerStateChange(event) {\n    var done = false;\n\n    if (event.data == YT.PlayerState.PLAYING && !done) {\n      setTimeout(stopVideo, 6000);\n      done = true;\n    }\n  }\n\n  createPlaylistButtons() {\n    this.setState.playlists.map(playlist => {\n      return playlist.name;\n    });\n  }\n\n  async search(query) {\n    axios.get(\"https://www.googleapis.com/youtube/v3/search?key=\" + this.state.apiKey + \"&q=\" + query + \"&part=snippet&maxResults=5&type=video\").then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default Youtube; // https://github.com/tjallingt/react-youtube","map":{"version":3,"sources":["C:/Users/Kwadw/OneDrive/Documents/Grind/Projects/React Projects/Spotify/spotify/src/pages/youtube.js"],"names":["axios","React","Component","YouTube","Button","YTPlayer","require","Youtube","constructor","state","apiKey","searchTerm","songName","playlists","opts","height","width","playerVars","enablejsapi","playlist","search","bind","loadVideo","componentDidMount","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","player","YT","Player","videoId","events","onPlayerReady","onPlayerStateChange","event","target","playVideo","videoID","window","onReady","onPLayerReady","stopVideo","done","data","PlayerState","PLAYING","setTimeout","createPlaylistButtons","setState","map","name","query","get","then","response","console","log","catch","error","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SACIC,MADJ,QAES,iBAFT;AAGA,OAAO,yBAAP;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AAEA,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAC5BM,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,yCADC;AAETC,MAAAA,UAAU,EAAE,EAFH;AAGTC,MAAAA,QAAQ,EAAE,EAHD;AAITC,MAAAA,SAAS,EAAE;AAJF,KAAb;AAMA,UAAMC,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,KAAK,EAAE,KAFE;AAGTC,MAAAA,UAAU,EAAE;AACRC,QAAAA,WAAW,EAAE,CADL;AAERC,QAAAA,QAAQ,EAAE;AAFF;AAHH,KAAb;AAQA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACH;;AACDE,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAZ;AACAF,IAAAA,GAAG,CAACG,GAAJ,GAAU,oCAAV;AACA,UAAMC,cAAc,GAAGH,QAAQ,CAACI,oBAAT,CAA8B,QAA9B,EAAwC,CAAxC,CAAvB;AACAD,IAAAA,cAAc,CAACE,UAAf,CAA0BC,YAA1B,CAAuCP,GAAvC,EAA4CI,cAA5C;AACA,SAAKI,uBAAL;AACH;;AAEDA,EAAAA,uBAAuB,GAAG;AACtBC,IAAAA,MAAM,GAAG,IAAIC,EAAE,CAACC,MAAP,CAAc,QAAd,EAAwB;AAC7BpB,MAAAA,MAAM,EAAE,KADqB;AAE7BC,MAAAA,KAAK,EAAE,KAFsB;AAG7BoB,MAAAA,OAAO,EAAE,aAHoB;AAI7BC,MAAAA,MAAM,EAAE;AACJ,mBAAW,KAAKC,aADZ;AAEJ,yBAAiB,KAAKC;AAFlB;AAJqB,KAAxB,CAAT;AASA,SAAKjB,SAAL,CAAe,eAAf;AACH;;AAEDgB,EAAAA,aAAa,CAACE,KAAD,EAAQ;AACjBA,IAAAA,KAAK,CAACC,MAAN,CAAaC,SAAb;AACD;;AAEHpB,EAAAA,SAAS,CAACqB,OAAD,EAAU;AACf,SAAKV,MAAL,GAAc,IAAIW,MAAM,CAACV,EAAP,CAAUC,MAAd,CAAqB,QAArB,EAA+B;AACzCC,MAAAA,OAAO,EAAEO,OADgC;AAEzCN,MAAAA,MAAM,EAAE;AACJQ,QAAAA,OAAO,EAAE,KAAKC;AADV;AAFiC,KAA/B,CAAd;AAMH;;AAEDC,EAAAA,SAAS,GAAG;AACRd,IAAAA,MAAM,CAACc,SAAP;AACH;;AAEDR,EAAAA,mBAAmB,CAACC,KAAD,EAAQ;AACvB,QAAIQ,IAAI,GAAG,KAAX;;AACA,QAAIR,KAAK,CAACS,IAAN,IAAcf,EAAE,CAACgB,WAAH,CAAeC,OAA7B,IAAwC,CAACH,IAA7C,EAAmD;AAC/CI,MAAAA,UAAU,CAACL,SAAD,EAAY,IAAZ,CAAV;AACAC,MAAAA,IAAI,GAAG,IAAP;AACL;AACF;;AAEDK,EAAAA,qBAAqB,GAAG;AACpB,SAAKC,QAAL,CAAczC,SAAd,CAAwB0C,GAAxB,CAA4BpC,QAAQ,IAAI;AAAC,aAAOA,QAAQ,CAACqC,IAAhB;AAAqB,KAA9D;AACH;;AAED,QAAMpC,MAAN,CAAaqC,KAAb,EAAoB;AAChBzD,IAAAA,KAAK,CACJ0D,GADD,CACK,sDAAsD,KAAKjD,KAAL,CAAWC,MAAjE,GAA0E,KAA1E,GAAkF+C,KAAlF,GAA0F,uCAD/F,EAECE,IAFD,CAEOC,QAAD,IAAc;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACH,KAJD,EAKCG,KALD,CAKQC,KAAD,IAAW;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,KAPD;AAQH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAIH;;AAtF2B;;AAyFhC,eAAe1D,OAAf,C,CAEA","sourcesContent":["import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport {\r\n    Button\r\n  } from \"react-bootstrap\";\r\nimport \"../css/pickPlaylist.css\"\r\n\r\nconst YTPlayer = require('yt-player')\r\n\r\nclass Youtube extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            apiKey: \"AIzaSyAUlBPBvCwXcYNNahVcmWPKphhIs4YjaWQ\",\r\n            searchTerm: \"\",\r\n            songName: \"\",\r\n            playlists: [],\r\n        }\r\n        const opts = {\r\n            height: '400',\r\n            width: '640',\r\n            playerVars: {\r\n                enablejsapi: 1,\r\n                playlist: [],\r\n            }\r\n        }\r\n        this.search = this.search.bind(this)\r\n        this.loadVideo = this.loadVideo.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        const tag = document.createElement('script');\r\n        tag.src = 'https://www.youtube.com/iframe_api';\r\n        const firstScriptTag = document.getElementsByTagName('script')[0];\r\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n        this.onYouTubeIframeAPIReady() \r\n    }\r\n\r\n    onYouTubeIframeAPIReady() {\r\n        player = new YT.Player('player', {\r\n            height: '390',\r\n            width: '640',\r\n            videoId: 'M7lc1UVf-VE',\r\n            events: {\r\n                'onReady': this.onPlayerReady,\r\n                'onStateChange': this.onPlayerStateChange\r\n            }\r\n        });\r\n        this.loadVideo(\"loliJVSwOiiwg\");\r\n    }\r\n\r\n    onPlayerReady(event) {\r\n        event.target.playVideo();\r\n      }\r\n\r\n    loadVideo(videoID) {\r\n        this.player = new window.YT.Player('player', {\r\n            videoId: videoID, \r\n            events: {\r\n                onReady: this.onPLayerReady,\r\n            }\r\n        });\r\n    }\r\n\r\n    stopVideo() {\r\n        player.stopVideo();\r\n    }\r\n\r\n    onPlayerStateChange(event) {\r\n        var done = false;\r\n        if (event.data == YT.PlayerState.PLAYING && !done) {\r\n            setTimeout(stopVideo, 6000);\r\n            done = true;\r\n      }\r\n    }\r\n    \r\n    createPlaylistButtons() {\r\n        this.setState.playlists.map(playlist => {return playlist.name});\r\n    }\r\n\r\n    async search(query) {\r\n        axios\r\n        .get(\"https://www.googleapis.com/youtube/v3/search?key=\" + this.state.apiKey + \"&q=\" + query + \"&part=snippet&maxResults=5&type=video\")\r\n        .then((response) => {\r\n            console.log(response)\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        });\r\n    }  \r\n\r\n    render() {\r\n        return(\r\n            <div id=\"player\">\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Youtube\r\n\r\n// https://github.com/tjallingt/react-youtube"]},"metadata":{},"sourceType":"module"}