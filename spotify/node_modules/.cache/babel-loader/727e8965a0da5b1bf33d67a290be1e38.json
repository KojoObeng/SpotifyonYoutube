{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kwadw\\\\OneDrive\\\\Documents\\\\Grind\\\\Projects\\\\React Projects\\\\Spotify\\\\spotify\\\\src\\\\components\\\\PlaylistButton.js\";\nimport React, { Component, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Spotify from \"spotify-web-api-js\";\nimport { useHistory, withRouter } from 'react-router-dom';\nimport { Button } from \"react-bootstrap\";\nimport \"../css/pickPlaylist.css\";\nconst spotifyWebApi = new Spotify();\n\nclass PlaylistButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playlistID: this.props.id,\n      playlistName: this.props.name,\n      numOfTracks: 0,\n      tracks: []\n    };\n    this.handleClick.bind(this);\n    this.loop.bind(this);\n  }\n\n  componentDidMount() {\n    this.tracks = [];\n    this.numOfTracks = 0;\n    spotifyWebApi.getPlaylistTracks(this.state.playlistID).then(response => {\n      this.setState({\n        numOfTracks: response.total\n      }, this.loop(this.state.numOfTracks, this.state.playlistID));\n    });\n  }\n\n  async loop(number, ID) {\n    for (let i = 0; i < Math.ceil(number / 100); i++) {\n      var r = await spotifyWebApi.getPlaylistTracks(ID, {\n        offset: i * 100\n      }).then(response => {\n        return response;\n      });\n      this.tracks.push(r);\n    }\n\n    this.tracks = this.tracks.map(hundred_tracks => {\n      return hundred_tracks.items;\n    });\n    this.tracks = [].concat.apply([], this.tracks);\n    this.setState({\n      tracks: this.tracks.map(item => {\n        return {\n          album_name: item.track.album.name,\n          album_images: item.track.album.images,\n          artists: item.track.artists.map(artist => {\n            return artist.name;\n          }),\n          duration: item.track.duration_ms,\n          track_name: item.track.name,\n          date: item.added_at\n        };\n      })\n    });\n    console.log(this.state.tracks);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"playlist-button-and-image-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: {\n        pathname: \"/youtube\",\n        playlist: this.state.current_playlist,\n        tracks: this.state.tracks\n      },\n      onClick: () => {\n        this.handleClick(this.props.id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"playlist-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, this.props.name), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"playlist-image\",\n      src: this.props.image,\n      alt: this.props.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    })));\n  }\n\n} // <Button className=\"playlist-number\">{this.props.index} </Button>\n\n\nexport default withRouter(PlaylistButton);","map":{"version":3,"sources":["C:/Users/Kwadw/OneDrive/Documents/Grind/Projects/React Projects/Spotify/spotify/src/components/PlaylistButton.js"],"names":["React","Component","useCallback","Link","Spotify","useHistory","withRouter","Button","spotifyWebApi","PlaylistButton","constructor","props","state","playlistID","id","playlistName","name","numOfTracks","tracks","handleClick","bind","loop","componentDidMount","getPlaylistTracks","then","response","setState","total","number","ID","i","Math","ceil","r","offset","push","map","hundred_tracks","items","concat","apply","item","album_name","track","album","album_images","images","artists","artist","duration","duration_ms","track_name","date","added_at","console","log","render","pathname","playlist","current_playlist","image"],"mappings":"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","sourcesContent":["import React, { Component, useCallback} from \"react\";\r\nimport {Link} from \"react-router-dom\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Spotify from \"spotify-web-api-js\";\r\nimport {useHistory, withRouter} from 'react-router-dom';\r\nimport {\r\n    Button\r\n  } from \"react-bootstrap\";\r\nimport \"../css/pickPlaylist.css\"\r\n\r\nconst spotifyWebApi = new Spotify();\r\n\r\nclass PlaylistButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playlistID: this.props.id, \r\n            playlistName: this.props.name,\r\n            numOfTracks: 0,\r\n            tracks: [],\r\n        }\r\n        this.handleClick.bind(this);\r\n        this.loop.bind(this);\r\n    }\r\n\r\n    componentDidMount ()  {\r\n        this.tracks = [];\r\n        this.numOfTracks = 0\r\n        spotifyWebApi.getPlaylistTracks(this.state.playlistID).then((response) => {\r\n            this.setState({\r\n                numOfTracks: response.total\r\n            },\r\n            this.loop(this.state.numOfTracks, this.state.playlistID))\r\n        })\r\n    }\r\n\r\n    async loop(number, ID) {\r\n        for (let i=0; i < Math.ceil(number / 100); i++) {\r\n            var r = await spotifyWebApi.getPlaylistTracks(ID, {offset: i*100}).then(response => {\r\n                return response\r\n            })\r\n            this.tracks.push(r);\r\n        }\r\n        this.tracks = this.tracks.map(hundred_tracks => {\r\n            return hundred_tracks.items\r\n        })\r\n        this.tracks = [].concat.apply([], this.tracks);\r\n        this.setState({ \r\n            tracks: this.tracks.map(item => {\r\n                return  {\r\n                    album_name: item.track.album.name,\r\n                    album_images: item.track.album.images,\r\n                    artists: item.track.artists.map((artist) => {return artist.name}),\r\n                    duration: item.track.duration_ms,\r\n                    track_name: item.track.name,\r\n                    date: item.added_at,\r\n                }\r\n            })\r\n        })\r\n        console.log(this.state.tracks)\r\n    }\r\n\r\n\r\n    render () {\r\n        return(\r\n            <div className=\"playlist-button-and-image-container\">\r\n\r\n            <Link to= {{\r\n                pathname: \"/youtube\",\r\n                playlist: this.state.current_playlist,\r\n                tracks: this.state.tracks}}\r\n            onClick={() => {this.handleClick(this.props.id)}}>\r\n                <Button className=\"playlist-button\">{this.props.name}</Button>\r\n                <img className=\"playlist-image\" src={this.props.image} alt={this.props.name}/>\r\n            </Link>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n// <Button className=\"playlist-number\">{this.props.index} </Button>\r\nexport default withRouter(PlaylistButton)"]},"metadata":{},"sourceType":"module"}